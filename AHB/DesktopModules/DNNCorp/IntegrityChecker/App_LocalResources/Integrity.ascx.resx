<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FileIntegrity.Title" xml:space="preserve">
    <value>File Integrity</value>
  </data>
  <data name="FileIntegrityDatabaseInvalid.Message" xml:space="preserve">
    <value>The File Integrity Database appears to have been modified.  This could be due to an file system error, or the database could have been modified maliciously</value>
  </data>
  <data name="FileIntegrityDatabaseOk.Message" xml:space="preserve">
    <value>The File Integrity Database has been verified to be authentic. All files marked "Unmodified" are in the same state as when they were released by the Signing Authority below.</value>
  </data>
  <data name="issuerLabel.Help" xml:space="preserve">
    <value>The name of the organization who signed these files</value>
  </data>
  <data name="issuerLabel.Text" xml:space="preserve">
    <value>Signed By:</value>
  </data>
  <data name="issuerLocationLabel.Help" xml:space="preserve">
    <value>Where the signature file was generated</value>
  </data>
  <data name="issuerLocationLabel.Text" xml:space="preserve">
    <value>Signed In:</value>
  </data>
  <data name="missingFilesLabel.Help" xml:space="preserve">
    <value>The number of files which are missing</value>
  </data>
  <data name="missingFilesLabel.Text" xml:space="preserve">
    <value>Missing files:</value>
  </data>
  <data name="modifiedFilesLabel.Help" xml:space="preserve">
    <value>The number of files which have been changed since they were signed</value>
  </data>
  <data name="modifiedFilesLabel.Text" xml:space="preserve">
    <value>Modified files:</value>
  </data>
  <data name="SignatureVerification.Error" xml:space="preserve">
    <value>Signature file could not be verified!  The certificate is not trusted by the system.</value>
  </data>
  <data name="unmodified.Text" xml:space="preserve">
    <value>Unmodified Files - [{0}]</value>
  </data>
  <data name="showHideLinkText.Text" xml:space="preserve">
    <value>Show/Hide Files...</value>
  </data>
  <data name="FileIntegrityDatabaseUnsure.Message" xml:space="preserve">
    <value>The File Integrity Database does not appear to have been modified.  However, due to limitations of your hosting environment, DotNetNuke was not able check if the certificate used to sign the file is valid.</value>
  </data>
  <data name="missing.Text" xml:space="preserve">
    <value>Missing Files - [{0}]</value>
  </data>
  <data name="modified.Text" xml:space="preserve">
    <value>Modified Files - [{0}]</value>
  </data>
  <data name="summary.Text" xml:space="preserve">
    <value>File Integrity Summary</value>
  </data>
  <data name="missing.Info" xml:space="preserve">
    <value>The list of missing files shows files which were included in the default installation package for DotNetNuke Professional, but which do not exist in this installation.  Missing files may impact your ability to use certain DotnetNuke features.</value>
  </data>
  <data name="modified.Info" xml:space="preserve">
    <value>The list of modified files shows those files which are different from the files included in the default installation package for DotNetNuke Professional.  You should review this list of files prior to performing any upgrade to avoid overwriting any of your application customizations. </value>
  </data>
  <data name="newfile.Info" xml:space="preserve">
    <value>The list of "other" files shows any file whose file extension is not included in the list of "Allowable File Extensions" in the host settings and can contain executeable code.  You should review any file appearing in this list as it can indicate a potential security issue.</value>
  </data>
  <data name="newfiles.Text" xml:space="preserve">
    <value>Other Files - [{0}]</value>
  </data>
  <data name="unmodified.Info" xml:space="preserve">
    <value>The list of unmodified files shows which are the same as the files included in the DotNetNuke Professional Installation.</value>
  </data>
  <data name="LoadDatabase.Error" xml:space="preserve">
    <value>There was a problem loading the Integrity Database file.  Please contact  &lt;a href="http://customers.dotnetnuke.com/Main/Default.aspx"&gt;technical support&lt;/a&gt;.</value>
  </data>
  <data name="Missing.Head" xml:space="preserve">
    <value>Missing Files</value>
  </data>
  <data name="Modified.Head" xml:space="preserve">
    <value>Modified Files</value>
  </data>
  <data name="New.Head" xml:space="preserve">
    <value>New Files</value>
  </data>
  <data name="Summary.Head" xml:space="preserve">
    <value>File Integrity Summary</value>
  </data>
  <data name="Unmodified.Head" xml:space="preserve">
    <value>Unmodified Files</value>
  </data>
</root>