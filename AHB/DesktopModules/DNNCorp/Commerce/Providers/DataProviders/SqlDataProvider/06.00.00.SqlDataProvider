IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Templates_ModuleId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Templates] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Templates_ModuleId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Templates_TemplateType]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Templates] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Templates_TemplateType]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Templates_IsSystem]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Templates] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Templates_IsSystem]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Templates_DateCreated]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Templates] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Templates_DateCreated]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_TaxRates_TaxIdentifier]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_TaxRates] DROP CONSTRAINT [DF_{objectQualifier}Commerce_TaxRates_TaxIdentifier]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_TaxRates_TaxRate]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_TaxRates] DROP CONSTRAINT [DF_{objectQualifier}Commerce_TaxRates_TaxRate]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Table_1_Required]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Properties] DROP CONSTRAINT [DF_Table_1_Required]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Properties_DateCreated]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Properties] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Properties_DateCreated]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Properties_DateUpdated]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Properties] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Properties_DateUpdated]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Properties_IsDeleted]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Properties] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Properties_IsDeleted]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Properties_SortPriority]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Properties] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Properties_SortPriority]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Properties_ObjectType]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Properties] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Properties_ObjectType]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_ProductId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_ProductId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_ProductGroupId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_ProductGroupId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_SortOrder]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_SortOrder]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_Active]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_Active]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_Deleted]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_Deleted]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_DateAdded]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_DateAdded]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_DateUpdated]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_DateUpdated]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_EmailTemplate]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_EmailTemplate]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_Taxable]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_Taxable]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_ShipFee]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_ShipFee]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_ShipWeight]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_ShipWeight]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_ProductType]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_ProductType]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_RequireShipAddress]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_RequireShipAddress]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_Visible]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_Visible]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_AllowedRolesGracePeriod]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_AllowedRolesGracePeriod]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Products_InstructionsEnabled]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Products_InstructionsEnabled]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_ProductGroups_SortOrder]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_ProductGroups] DROP CONSTRAINT [DF_{objectQualifier}Commerce_ProductGroups_SortOrder]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Product_Properties_SortPriority]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Product_Properties] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Product_Properties_SortPriority]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Product_Properties_IsDeleted]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Product_Properties] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Product_Properties_IsDeleted]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderTemp_CartId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderTemp] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderTemp_CartId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderTemp_Price]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderTemp] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderTemp_Price]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderTemp_DateAdded]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderTemp] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderTemp_DateAdded]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderTemp_Discount]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderTemp] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderTemp_Discount]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderTemp_DiscountId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderTemp] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderTemp_DiscountId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderStatus_PortalId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderStatus] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderStatus_PortalId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderStatus_SortOrder]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderStatus] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderStatus_SortOrder]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Orders_PostLog_Status]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders_PostLog] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Orders_PostLog_Status]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Orders_PostLog_DateCreated]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders_PostLog] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Orders_PostLog_DateCreated]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Orders_OrderId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Orders_OrderId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Orders_BillToAddressId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Orders_BillToAddressId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Orders_ShipToAddressId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Orders_ShipToAddressId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Orders_DateUpdated]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Orders_DateUpdated]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Orders_OrderStatus]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Orders_OrderStatus]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Orders_SalesRepId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Orders_SalesRepId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Orders_IsPaid]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Orders_IsPaid]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Orders_CustomerId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Orders_CustomerId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Orders_DiscountId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Orders_DiscountId]
END

GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_Commerce_OrderDetails_Commerce_Orders]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderDetails]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] DROP CONSTRAINT [FK_Commerce_OrderDetails_Commerce_Orders]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderDetails_OrderDetailsId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_OrderDetailsId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderDetails_Disc]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_Disc]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderDetails_Misc]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_Misc]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderDetails_Deleted]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_Deleted]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderDetails_DiscountId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_DiscountId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderDetails_SubTotal]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_SubTotal]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_OrderDetails_AgreementIds]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] DROP CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_AgreementIds]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Files_RequiresAgreement]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Files] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Files_RequiresAgreement]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Files_IsDeleted]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Files] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Files_IsDeleted]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Files_DateCreated]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Files] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Files_DateCreated]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Files_DateUpdated]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Files] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Files_DateUpdated]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Files_Archived]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Files] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Files_Archived]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_File_Log_DateCreated]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_File_Log] DROP CONSTRAINT [DF_{objectQualifier}Commerce_File_Log_DateCreated]
END

GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_Commerce_DiscountsToProducts_Commerce_Discounts]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_DiscountsToProducts]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToProducts] DROP CONSTRAINT [FK_Commerce_DiscountsToProducts_Commerce_Discounts]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_Commerce_DiscountsToProducts_Commerce_Products]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_DiscountsToProducts]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToProducts] DROP CONSTRAINT [FK_Commerce_DiscountsToProducts_Commerce_Products]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_DiscountsToCustomers_Count]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToCustomers] DROP CONSTRAINT [DF_{objectQualifier}Commerce_DiscountsToCustomers_Count]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Discounts_DiscountCodeRequired]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Discounts_DiscountCodeRequired]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Discounts_UserMaxUsage]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Discounts_UserMaxUsage]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Discounts_TotalMaxUsage]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Discounts_TotalMaxUsage]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Discounts_TotalUsageCount]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Discounts_TotalUsageCount]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Disable]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Disable]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_RestrictionType]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts] DROP CONSTRAINT [DF_{objectQualifier}Commerce_RestrictionType]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Commerce_Cart_Discount]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Cart] DROP CONSTRAINT [DF_{objectQualifier}Commerce_Cart_Discount]
END

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Templates]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_Templates]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_TaxRates]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_TaxRates]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Properties]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_Properties]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Products]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_Products]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_ProductGroups]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_ProductGroups]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Product_Properties]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_Product_Properties]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Product_Files]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_Product_Files]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderTemp]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_OrderTemp]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderStatus]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_OrderStatus]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Orders_PostLog]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_Orders_PostLog]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Orders]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_Orders]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderDetails]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Files]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_Files]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_File_Log]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_File_Log]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_DiscountsToRoles]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToRoles]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_DiscountsToProducts]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToProducts]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_DiscountsToCustomers]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToCustomers]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discounts_ReqProducts]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts_ReqProducts]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discounts]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Cart]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_Cart]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Settings]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Commerce_Settings]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_Settings](
	[PortalId] [int] NOT NULL,
	[ModuleId] [int] NOT NULL,
	[SettingName] [nvarchar](50) NULL,
	[SettingValue] [nvarchar](2000) NULL
) 

GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_Templates](
	[TemplateId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[ModuleId] [int] NOT NULL,
	[TemplateType] [int] NOT NULL,
	[IsSystem] [bit] NOT NULL,
	[Title] [nvarchar](150) NULL,
	[Subject] [nvarchar](200) NULL,
	[Template] [ntext] NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateUpdated] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}Commerce_Templates] PRIMARY KEY CLUSTERED 
(
	[TemplateId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_TaxRates](
	[TaxItemId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[ModuleId] [int] NOT NULL,
	[TaxIdentifier] [int] NOT NULL,
	[TaxQualifier] [nvarchar](50) NULL,
	[TaxRate] [float] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Commerce_TaxRates] PRIMARY KEY CLUSTERED 
(
	[TaxItemId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_Properties](
	[PropertyDefId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[PropertyName] [nvarchar](1000) NULL,
	[DataType] [nvarchar](50) NOT NULL,
	[IsRequired] [bit] NOT NULL,
	[MinValue] [int] NULL,
	[MaxValue] [int] NULL,
	[DefaultValue] [nvarchar](1000) NULL,
	[ValidationExpression] [nvarchar](2000) NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateUpdated] [datetime] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[SortPriority] [int] NOT NULL,
	[ValidationAction] [nvarchar](max) NULL,
	[ObjectType] [int] NOT NULL,
	[ObjectOwnerKey] [nvarchar](50) NULL,
	[IsEnabled] [bit] NOT NULL
 CONSTRAINT [PK_{objectQualifier}Commerce_Properties] PRIMARY KEY CLUSTERED 
(
	[PropertyDefId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_Products](
	[ProductId] [uniqueidentifier] DEFAULT NEWID() NOT NULL,
	[PortalId] [int] NOT NULL,
	[ModuleId] [int] NOT NULL,
	[ProductGroupId] [int] NOT NULL,
	[ProductSKU] [nvarchar](100) NULL,
	[ProductName] [nvarchar](255) NULL,
	[ProductDescription] [nvarchar](1000) NULL,
	[Price] [money] NULL,
	[Cost] [money] NULL,
	[Retail] [money] NULL,
	[SortOrder] [int] NOT NULL,
	[Active] [bit] NOT NULL,
	[Deleted] [bit] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[DateUpdated] [datetime] NOT NULL,
	[AddToRoles] [nvarchar](255) NULL,
	[SendEmailTemplate] [int] NOT NULL,
	[CustomAction] [nvarchar](1000) NULL,
	[Taxable] [bit] NOT NULL,
	[ShipFee] [money] NOT NULL,
	[ShipWeight] [int] NOT NULL,
	[ProductType] [int] NOT NULL,
	[RequireShipAddress] [bit] NOT NULL,
	[Visible] [bit] NOT NULL,
	[AllowedRoles] [nvarchar](255) NULL,
	[AllowedRolesGracePeriod] [int] NOT NULL,
	[PostOrderInstructions] [nvarchar](max) NULL,
	[InstructionsEnabled] [bit] NULL,
	[ProductDetailPage] [nvarchar](1000) NULL,
	[RecLength] int NULL,
	[RecInterval] nvarchar(10) NULL,
	[RecOccurances] int NULL
 CONSTRAINT [PK_{objectQualifier}Commerce_Products] PRIMARY KEY CLUSTERED 
(
	[ProductId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_ProductGroups](
	[ProductGroupId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[ModuleId] [int] NOT NULL,
	[GroupName] [nvarchar](255) NULL,
	[SortOrder] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Commerce_ProductGroups] PRIMARY KEY CLUSTERED 
(
	[ProductGroupId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_Product_Properties](
	[ProductId] [uniqueidentifier] NOT NULL,
	[PropertyDefId] [int] NOT NULL,
	[SortPriority] [int] NOT NULL,
	[DefaultValue] [nvarchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_Product_Files](
	[FileProductKey] [uniqueidentifier] NOT NULL,
	[ProductId] [uniqueidentifier] NOT NULL,
	[FileId] [uniqueidentifier] NOT NULL,
	[PurchaseDate] [datetime] NULL
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_OrderTemp](
	[OrderItemId] [uniqueidentifier] DEFAULT NEWID() NOT NULL,
	[SessionId] [nvarchar](50) NOT NULL,
	[UserId] [int] NULL,
	[ProductId] [uniqueidentifier] NOT NULL,
	[ProductSku] [nvarchar](50) NULL,
	[ProductName] [nvarchar](255) NULL,
	[Qty] [int] NOT NULL,
	[Price] [money] NOT NULL,
	[SubTotal] [money] NOT NULL,
	[DateAdded] [datetime] NOT NULL,
	[Discount] [money] NOT NULL,
	[DiscountId] [int] NOT NULL,
	[Note] [nvarchar](1000) NULL,
	[ShopperId] [uniqueidentifier] NULL,
	[OrderItemData] [nvarchar](max) NULL,
 CONSTRAINT [PK_{objectQualifier}Commerce_OrderTemp] PRIMARY KEY CLUSTERED 
(
	[OrderItemId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_OrderStatus](
	[OrderStatusId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[ModuleId] [int] NOT NULL,
	[DisplayText] [nvarchar](100) NULL,
	[SortOrder] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Commerce_OrderStatus] PRIMARY KEY CLUSTERED 
(
	[OrderStatusId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_Orders_PostLog](
	[ProcessLogId] [int] IDENTITY(1,1) NOT NULL,
	[OrderId] [uniqueidentifier] NOT NULL,
	[ShopperSessionId] [nvarchar](50) NULL,
	[ActionName] [nvarchar](50) NOT NULL,
	[Status] [int] NOT NULL,
	[Note] [nvarchar](1000) NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Commerce_Orders_PostLog] PRIMARY KEY CLUSTERED 
(
	[ProcessLogId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_Orders](
	[OrderId] [uniqueidentifier] DEFAULT NEWID() NOT NULL,
	[InvoiceNumber] [nvarchar](50) NULL,
	[ModuleId] [int] NOT NULL,
	[PortalId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[BillAddressId] [int] NOT NULL,
	[ShipAddressId] [int] NOT NULL,
	[PurchaseDate] [datetime] NOT NULL,
	[PaymentMethod] [nvarchar](50) NULL,
	[PaymentRef] [nvarchar](50) NULL,
	[PaymentCustom1] [nvarchar](50) NULL,
	[PaymentCustom2] [nvarchar](50) NULL,
	[SubTotal] [money] NULL,
	[Tax] [money] NULL,
	[Disc] [money] NULL,
	[Misc] [money] NULL,
	[Shipping] [money] NULL,
	[GrandTotal] [money] NULL,
	[DateUpdated] [datetime] NOT NULL,
	[OrderNote] [nvarchar](1000) NULL,
	[OrderStatus] [int] NOT NULL,
	[CustomerName] [nvarchar](255) NULL,
	[Source] [nvarchar](255) NULL,
	[SalesRepId] [int] NOT NULL,
	[IsPaid] [bit] NOT NULL,
	[DatePaid] [datetime] NULL,
	[CustomerId] [int] NOT NULL,
	[DiscountId] [int] NOT NULL,
	[ShipTo] [nvarchar](1000) NULL,
	[BillTo] [nvarchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL
 CONSTRAINT [PK_{objectQualifier}Commerce_Orders] PRIMARY KEY CLUSTERED 
(
	[OrderId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails](
	[OrderDetailsId] [uniqueidentifier] DEFAULT NEWID() NOT NULL,
	[OrderId] [uniqueidentifier] NOT NULL,
	[ProductId] [uniqueidentifier] NOT NULL,
	[Price] [money] NOT NULL,
	[Qty] [int] NOT NULL,
	[Disc] [money] NOT NULL,
	[Misc] [money] NOT NULL,
	[Deleted] [bit] NOT NULL,
	[DiscountId] [int] NOT NULL,
	[SubTotal] [money] NOT NULL,
	[Note] [nvarchar](255) NULL,
	[AgreementIds] [nvarchar](50) NOT NULL,
	[ProductSKU] [nvarchar](50) NULL,
	[ProductName] [nvarchar](255) NULL,
	[OrderItemData] [nvarchar](max) NULL,
 CONSTRAINT [PK_{objectQualifier}Commerce_OrderDetails] PRIMARY KEY CLUSTERED 
(
	[OrderDetailsId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_Files](
	[FileId] [uniqueidentifier] NOT NULL,
	[FileName] [nvarchar](255) NULL,
	[Title] [nvarchar](255) NULL,
	[Description] [nvarchar](max) NULL,
	[RequiresAgreement] [bit] NOT NULL,
	[RequiresRole] [bit] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateUpdated] [datetime] NOT NULL,
	[FileData] [image] NULL,
	[ContentType] [nvarchar](225) NULL,
	[FileSize] [int] NULL,
	[PortalId] [int] NULL,
	[Archived] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Commerce_Files] PRIMARY KEY CLUSTERED 
(
	[FileId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
)

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_File_Log](
	[LogId] [int] IDENTITY(1,1) NOT NULL,
	[FileId] [uniqueidentifier] NOT NULL,
	[UserId] [int] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[IPAddress] [nvarchar](25) NULL,
	[UserAgent] [nvarchar](255) NULL,
	[Referrer] [nvarchar](1000) NULL,
	[FileProductKey] [uniqueidentifier] NULL,
 CONSTRAINT [PK_{objectQualifier}Commerce_File_Log] PRIMARY KEY CLUSTERED 
(
	[LogId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToRoles](
	[DiscountId] [int] NOT NULL,
	[RoleId] [int] NOT NULL,
 CONSTRAINT [UK_Commerce_DiscountsToRoles] UNIQUE NONCLUSTERED 
(
	[DiscountId] ASC,
	[RoleId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToProducts](
	[PortalId] [int] NOT NULL,
	[ModuleId] [int] NOT NULL,
	[ProductId] [uniqueidentifier] NOT NULL,
	[DiscountId] [int] NOT NULL,
 CONSTRAINT [UK_ProdDiscounts] UNIQUE NONCLUSTERED 
(
	[ProductId] ASC,
	[DiscountId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToCustomers](
	[DiscountId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[Count] [int] NOT NULL
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts_ReqProducts](
	[RestrictId] [int] IDENTITY(1,1) NOT NULL,
	[DiscountId] [int] NOT NULL,
	[ProductId] [uniqueidentifier] NOT NULL,
	[QualifyStartDate] [smalldatetime] NULL,
	[QualifyEndDate] [smalldatetime] NULL
 CONSTRAINT [PK_{objectQualifier}Commerce_Discounts_ReqProducts] PRIMARY KEY NONCLUSTERED 
(
	[RestrictId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts](
	[DiscountId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[ModuleId] [int] NOT NULL,
	[DiscountCode] [nvarchar](50) NULL,
	[DiscountCodeRequired] [bit] NOT NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[Description] [nvarchar](255) NULL,
	[DiscountAmount] [money] NULL,
	[DiscountPercent] [decimal](18, 0) NULL,
	[UserMaxUsage] [int] NOT NULL,
	[TotalMaxUsage] [int] NOT NULL,
	[TotalUsageCount] [int] NOT NULL,
	[Active] [bit] NOT NULL,
	[Restriction] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Commerce_Discounts] PRIMARY KEY CLUSTERED 
(
	[DiscountId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Commerce_Cart](
	[CartId] [int] IDENTITY(1000,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[ShopperId] [uniqueidentifier] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateUpdated] [datetime] NOT NULL,
	[BillingAddress] [nvarchar](1000) NULL,
	[ShippingAddress] [nvarchar](1000) NULL,
	[OrderId] [uniqueidentifier] NULL,
	[Discount] [money] NOT NULL,
	[DiscountId] [int] NOT NULL
 CONSTRAINT [PK_{objectQualifier}Commerce_Cart] PRIMARY KEY CLUSTERED 
(
	[CartId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF) 
) 

GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Templates] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Templates_ModuleId]  DEFAULT ((0)) FOR [ModuleId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Templates] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Templates_TemplateType]  DEFAULT ((0)) FOR [TemplateType]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Templates] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Templates_IsSystem]  DEFAULT ((0)) FOR [IsSystem]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Templates] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Templates_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_TaxRates] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_TaxRates_TaxIdentifier]  DEFAULT ((0)) FOR [TaxIdentifier]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_TaxRates] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_TaxRates_TaxRate]  DEFAULT ((0)) FOR [TaxRate]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Orders_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Properties] ADD  CONSTRAINT [DF_Table_1_Required]  DEFAULT ((0)) FOR [IsRequired]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Properties] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Properties_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Properties] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Properties_DateUpdated]  DEFAULT (getdate()) FOR [DateUpdated]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Properties] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Properties_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Properties] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Properties_SortPriority]  DEFAULT ((0)) FOR [SortPriority]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Properties] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Properties_ObjectType]  DEFAULT ((0)) FOR [ObjectType]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_ProductGroupId]  DEFAULT ((0)) FOR [ProductGroupId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_SortOrder]  DEFAULT ((1)) FOR [SortOrder]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_Active]  DEFAULT ((1)) FOR [Active]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_Deleted]  DEFAULT ((0)) FOR [Deleted]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_DateUpdated]  DEFAULT (getdate()) FOR [DateUpdated]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_EmailTemplate]  DEFAULT ((0)) FOR [SendEmailTemplate]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_Taxable]  DEFAULT ((0)) FOR [Taxable]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_ShipFee]  DEFAULT ((0)) FOR [ShipFee]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_ShipWeight]  DEFAULT ((0)) FOR [ShipWeight]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_ProductType]  DEFAULT ((0)) FOR [ProductType]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_RequireShipAddress]  DEFAULT ((1)) FOR [RequireShipAddress]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_Visible]  DEFAULT ((1)) FOR [Visible]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_AllowedRolesGracePeriod]  DEFAULT ((0)) FOR [AllowedRolesGracePeriod]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Products] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Products_InstructionsEnabled]  DEFAULT ((0)) FOR [InstructionsEnabled]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_ProductGroups] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_ProductGroups_SortOrder]  DEFAULT ((0)) FOR [SortOrder]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Product_Properties] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Product_Properties_SortPriority]  DEFAULT ((0)) FOR [SortPriority]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Product_Properties] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Product_Properties_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderTemp] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_OrderTemp_Price]  DEFAULT ((0)) FOR [Price]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderTemp] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_OrderTemp_DateAdded]  DEFAULT (getdate()) FOR [DateAdded]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderTemp] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_OrderTemp_Discount]  DEFAULT ((0)) FOR [Discount]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderTemp] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_OrderTemp_DiscountId]  DEFAULT ((0)) FOR [DiscountId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderStatus] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_OrderStatus_PortalId]  DEFAULT ((0)) FOR [PortalId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderStatus] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_OrderStatus_SortOrder]  DEFAULT ((0)) FOR [SortOrder]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders_PostLog] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Orders_PostLog_Status]  DEFAULT ((0)) FOR [Status]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders_PostLog] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Orders_PostLog_DateCreated]  DEFAULT (getdate()) FOR [DateCreated]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Orders_BillToAddressId]  DEFAULT ((0)) FOR [BillAddressId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Orders_ShipToAddressId]  DEFAULT ((0)) FOR [ShipAddressId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Orders_DateUpdated]  DEFAULT (getdate()) FOR [DateUpdated]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Orders_OrderStatus]  DEFAULT ((0)) FOR [OrderStatus]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Orders_SalesRepId]  DEFAULT ((0)) FOR [SalesRepId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Orders_IsPaid]  DEFAULT ((0)) FOR [IsPaid]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Orders_CustomerId]  DEFAULT ((0)) FOR [CustomerId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Orders] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Orders_DiscountId]  DEFAULT ((0)) FOR [DiscountId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_Commerce_OrderDetails_Commerce_Orders] FOREIGN KEY([OrderId])
REFERENCES {databaseOwner}[{objectQualifier}Commerce_Orders] ([OrderId])
ON DELETE CASCADE
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] CHECK CONSTRAINT [FK_Commerce_OrderDetails_Commerce_Orders]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_Disc]  DEFAULT ((0)) FOR [Disc]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_Misc]  DEFAULT ((0)) FOR [Misc]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_Deleted]  DEFAULT ((0)) FOR [Deleted]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_DiscountId]  DEFAULT ((0)) FOR [DiscountId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_SubTotal]  DEFAULT ((0)) FOR [SubTotal]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_OrderDetails] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_OrderDetails_AgreementIds]  DEFAULT ('') FOR [AgreementIds]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Files] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Files_RequiresAgreement]  DEFAULT ((0)) FOR [RequiresAgreement]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Files] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Files_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Files] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Files_DateCreated]  DEFAULT (getutcdate()) FOR [DateCreated]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Files] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Files_DateUpdated]  DEFAULT (getutcdate()) FOR [DateUpdated]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Files] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Files_Archived]  DEFAULT ((0)) FOR [Archived]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_File_Log] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_File_Log_DateCreated]  DEFAULT (getutcdate()) FOR [DateCreated]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToProducts]  WITH NOCHECK ADD  CONSTRAINT [FK_Commerce_DiscountsToProducts_Commerce_Discounts] FOREIGN KEY([DiscountId])
REFERENCES {databaseOwner}[{objectQualifier}Commerce_Discounts] ([DiscountId])
ON DELETE CASCADE
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToProducts] CHECK CONSTRAINT [FK_Commerce_DiscountsToProducts_Commerce_Discounts]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToProducts]  WITH NOCHECK ADD  CONSTRAINT [FK_Commerce_DiscountsToProducts_Commerce_Products] FOREIGN KEY([ProductId])
REFERENCES {databaseOwner}[{objectQualifier}Commerce_Products] ([ProductId])
ON DELETE CASCADE
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToProducts] CHECK CONSTRAINT [FK_Commerce_DiscountsToProducts_Commerce_Products]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_DiscountsToCustomers] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_DiscountsToCustomers_Count]  DEFAULT ((0)) FOR [Count]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Discounts_DiscountCodeRequired]  DEFAULT ((0)) FOR [DiscountCodeRequired]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Discounts_UserMaxUsage]  DEFAULT ((-1)) FOR [UserMaxUsage]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Discounts_TotalMaxUsage]  DEFAULT ((-1)) FOR [TotalMaxUsage]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Discounts_TotalUsageCount]  DEFAULT ((0)) FOR [TotalUsageCount]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Disable]  DEFAULT ((1)) FOR [Active]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Discounts] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_RestrictionType]  DEFAULT ((0)) FOR [Restriction]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Commerce_Cart] ADD  CONSTRAINT [DF_{objectQualifier}Commerce_Cart_Discount]  DEFAULT ((0)) FOR [Discount]
GO



IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}vw_Commerce_OrdersList]'))
DROP VIEW {databaseOwner}[{objectQualifier}vw_Commerce_OrdersList]
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_Commerce_OrdersList]
AS
SELECT     P.OrderId, P.InvoiceNumber, P.ModuleId, P.PortalId, P.UserId, P.ShipAddressId, P.BillAddressId, P.PurchaseDate, P.PaymentMethod, P.PaymentRef, 
					  P.PaymentCustom1, P.PaymentCustom2, P.SubTotal, P.Tax, P.Disc, P.Misc, P.Shipping, P.GrandTotal, P.DateUpdated, P.OrderNote, P.OrderStatus, 
					  S.DisplayText AS OrderStatusText, S.OrderStatusId, ISNULL(P.Source, '') AS Source, P.SalesRepId, P.CustomerId, P.DatePaid, P.IsPaid, U.FirstName, U.LastName, 
					  U.Email, U.LastName + ', ' + U.FirstName AS CustomerName, p.ShipTo, p.BillTo
FROM         {databaseOwner}{objectQualifier}Commerce_Orders AS P INNER JOIN
			{databaseOwner}{objectQualifier}Users as U ON P.UserId = U.UserID LEFT OUTER JOIN
			{databaseOwner}{objectQualifier}Commerce_OrderStatus AS S ON P.OrderStatus = S.OrderStatusId
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderDetails_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderDetails_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Product_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Product_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Dashboard_RecentCustomers]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Dashboard_RecentCustomers]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Dashboard_PendingOrders]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Dashboard_PendingOrders]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Users_Search]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Users_Search]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Templates_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Templates_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Templates_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Templates_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Templates_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Templates_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Templates_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Templates_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_TaxRates_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_TaxRates_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_TaxRates_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_TaxRates_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_TaxRates_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_TaxRates_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_TaxRates_GetRate]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_TaxRates_GetRate]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_TaxRates_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_TaxRates_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_RepairProductSort]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_RepairProductSort]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Properties_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Properties_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Properties_RebuildSort]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Properties_RebuildSort]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Properties_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Properties_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Properties_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Properties_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_ProductGroup_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_ProductGroup_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_ProductGroup_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_ProductGroup_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_ProductGroup_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_ProductGroup_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_ProductGroup_ChangeSort]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_ProductGroup_ChangeSort]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_ProductGroup_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_ProductGroup_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Product_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Product_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Product_ChangeSort]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Product_ChangeSort]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Product_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Product_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Product_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Product_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderTemp_QtyUpdate]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderTemp_QtyUpdate]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderTemp_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderTemp_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderTemp_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderTemp_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderTemp_Add]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderTemp_Add]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderTemp_DeleteItem]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderTemp_DeleteItem]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderStatus_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderStatus_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderStatus_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderStatus_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderStatus_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderStatus_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrdersDetails_From_Temp]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrdersDetails_From_Temp]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderStatus_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderStatus_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Orders_SearchHistory]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_SearchHistory]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Orders_Search]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_Search]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Orders_PostLog_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_PostLog_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Orders_PostLog_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_PostLog_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Orders_ListByCustomer]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_ListByCustomer]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Orders_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Orders_GetLast]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_GetLast]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Orders_GetByOrderNumber]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_GetByOrderNumber]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Orders_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Orders_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderDetails_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderDetails_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderDetails_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderDetails_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderDetails_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderDetails_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Order_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Order_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_GetUsers]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_GetUsers]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Files_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Files_UserFiles]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_UserFiles]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Files_OrderItem]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_OrderItem]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Files_GetProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_GetProduct]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Files_ListByProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_ListByProduct]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Files_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Files_Download]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_Download]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Files_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Files_AddToProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_AddToProduct]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_File_LogSave]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_File_LogSave]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discounts_Search]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discounts_Search]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discounts_GetUserUsageCount]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discounts_GetUserUsageCount]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_UpdateUsage]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_UpdateUsage]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_ListReqRoles]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_ListReqRoles]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_ListReqProducts]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_ListReqProducts]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_ListProducts]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_ListProducts]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_GetByCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_GetByCode]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_FindDiscount]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_FindDiscount]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_DelReqRole]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_DelReqRole]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_DelReqProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_DelReqProduct]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_DeleteProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_DeleteProduct]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_AddReqProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_AddReqProduct]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_AddReqRole]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_AddReqRole]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_DashBoard_SalesByMonth]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_DashBoard_SalesByMonth]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_AddProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_AddProduct]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Dashboard_RecentPurchases]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Dashboard_RecentPurchases]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Dashboard_QuickSummary]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Dashboard_QuickSummary]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_DashBoard_MonthBestProducts]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_DashBoard_MonthBestProducts]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Customers_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Customers_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Customers_GetAddresses]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Customers_GetAddresses]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Cart_UpdateOrderData]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Cart_UpdateOrderData]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Customers_FindByEmail]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Customers_FindByEmail]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Cart_UpdateDiscount]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Cart_UpdateDiscount]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Cart_UpdateDate]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Cart_UpdateDate]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Cart_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Cart_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Cart_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Cart_Get]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Settings_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Settings_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Settings_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Settings_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Settings_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Settings_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Settings_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Settings_Delete]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Discount_ForProduct]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_ForProduct]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_OrderDetails_ListByProductIdForUser]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderDetails_ListByProductIdForUser]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Commerce_Cart_UpdateCartItemDiscount]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Cart_UpdateCartItemDiscount]
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Settings_Save]
(
	@PortalId int,
	@ModuleId int,
	@SettingName nvarchar(50),
	@SettingValue nvarchar(2000)
)
AS
If EXISTS(SELECT SettingName FROM {databaseOwner}[{objectQualifier}Commerce_Settings] 
	WHERE PortalId = @PortalId AND ModuleId = @ModuleId AND SettingName = @SettingName)
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Commerce_Settings]
		SET SettingValue = @SettingValue
		 WHERE PortalId = @PortalId AND ModuleId = @ModuleId AND SettingName = @SettingName
	END
ELSE
	INSERT INTO {databaseOwner}[{objectQualifier}Commerce_Settings]
		(PortalId, ModuleId, SettingName, SettingValue)
		VALUES
		(@PortalId, @ModuleId, @SettingName, @SettingValue)
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Settings_List]
(
	@PortalId int,
	@ModuleId int
)
AS
SELECT SettingName, SettingValue FROM {databaseOwner}[{objectQualifier}Commerce_Settings] 
	WHERE PortalId = @PortalId AND ModuleId = @ModuleId
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Settings_Get]
(
	@PortalId int,
	@ModuleId int,
	@SettingName nvarchar(50)
)
AS
SELECT SettingValue FROM {databaseOwner}[{objectQualifier}Commerce_Settings] 
	WHERE PortalId = @PortalId AND ModuleId = @ModuleId AND SettingName = @SettingName
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Settings_Delete]
(
	@PortalId int,
	@ModuleId int,
	@SettingName nvarchar(50)
)
AS
DELETE FROM {databaseOwner}[{objectQualifier}Commerce_Settings] WHERE PortalId = @PortalId AND ModuleId = @ModuleId AND SettingName = @SettingName
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderDetails_Save](
@OrderId uniqueidentifier,
@OrderDetailsId uniqueidentifier,
@ProductId uniqueidentifier,
@Price money,
@Qty int,
@Disc money,
@Misc money,
@SubTotal money,
@Note nvarchar(255),
@OrderItemData nvarchar(max)
)
AS
BEGIN
IF EXISTS (SELECT OrderDetailsId From {databaseOwner}{objectQualifier}Commerce_OrderDetails WHERE OrderId = @OrderId AND OrderDetailsId = @OrderDetailsId)
	UPDATE {databaseOwner}{objectQualifier}Commerce_OrderDetails
	SET ProductId = @ProductId,
		Price = @Price,
		Qty = @Qty,
		Disc = @Disc,
		Misc = @Misc,
		SubTotal = @SubTotal,
		Note = @Note,
		OrderItemData = @OrderItemData
		
	WHERE OrderDetailsId = @OrderDetailsId
ELSE
	BEGIN
		SET @OrderDetailsId = (SELECT NEWID())
		INSERT INTO {databaseOwner}{objectQualifier}Commerce_OrderDetails
					  (OrderId, OrderDetailsId, ProductId, Price, Qty, Disc, Misc, SubTotal, Note,OrderItemData)
		VALUES     (@OrderId,@OrderDetailsId, @ProductId,@Price,@Qty,@Disc,@Misc, @SubTotal, @Note,@OrderItemData)
	END
END
DECLARE @OrderSubTotal money
DECLARE @GrandTotal money
SET @OrderSubTotal = (SELECT SUM(SubTotal) FROM {databaseOwner}{objectQualifier}Commerce_OrderDetails WHERE OrderId = @OrderId and Deleted = 0)
SET @GrandTotal = (SELECT (@OrderSubTotal - IsNull(Disc,0)) + IsNull(Tax,0) + IsNull(Misc,0)  FROM {databaseOwner}{objectQualifier}Commerce_Orders WHERE OrderId = @OrderId)
UPDATE {databaseOwner}{objectQualifier}Commerce_Orders
	SET SubTotal = @OrderSubTotal,
	GrandTotal = @GrandTotal
WHERE OrderId = @OrderId
SELECT @OrderDetailsId





GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Product_Save]
	@ProductId uniqueidentifier,
	@PortalId int,
	@ModuleId int,
	@ProductGroupId int,
	@ProductSKU nvarchar(100),
	@ProductName nvarchar(255),
	@ProductDescription nvarchar(1000),
	@Price money,
	@Cost money,
	@Retail money,
	@Active bit,
	@AddToRoles nvarchar(255),
	@SendEmailTemplate int,
	@CustomAction nvarchar(1000),
	@Taxable bit,
	@ShipFee money,
	@ProductType int,
	@RequireShipAddress bit,
	@Visible bit,
	@AllowedRoles nvarchar(255) = '',
	@AllowedRolesGracePeriod int,
	@Instructions nvarchar(max),
	@InstructionsEnabled bit,
	@ProductDetailPage nvarchar(1000),
	@RecLength int,
	@RecInterval nvarchar(10),
	@RecOccurances int

AS
DECLARE @SortOrder int
If EXISTS(Select ProductId FROM {databaseOwner}[{objectQualifier}Commerce_Products] WHERE ProductId = @ProductId)
		BEGIN
			DECLARE @OldProductGroupId int
			Select @OldProductGroupId = ProductGroupId, @SortOrder = SortOrder FROM {databaseOwner}[{objectQualifier}Commerce_Products] WHERE ProductId = @ProductId
			If @OldProductGroupId <> @ProductGroupId 
				BEGIN
					SELECT @SortOrder = Max(SortOrder) From {databaseOwner}[{objectQualifier}Commerce_Products] WHERE ModuleId = @ModuleId AND ProductGroupId = @ProductGroupId
					SET @SortOrder = IsNull(@SortOrder,0) + 1
					EXEC {databaseOwner}[{objectQualifier}Commerce_RepairProductSort] @OldProductGroupId
				END
			UPDATE	{databaseOwner}[{objectQualifier}Commerce_Products]
			SET		PortalId = @PortalId, ModuleId = @ModuleId, ProductGroupId = @ProductGroupId, ProductSKU = @ProductSKU, ProductName = @ProductName, 
					ProductDescription = @ProductDescription, Price = @Price, Cost = @Cost, Retail = @Retail, Active = @Active, DateUpdated = GETDATE(), SortOrder = @SortOrder,
					AddToRoles = @AddToRoles, SendEmailTemplate = @SendEmailTemplate, CustomAction = @CustomAction, Taxable = @Taxable, ShipFee = @ShipFee,
					ProductType = @ProductType, RequireShipAddress = @RequireShipAddress, 
					Visible=@Visible,AllowedRoles=@AllowedRoles,
					PostOrderInstructions = @Instructions,
					InstructionsEnabled = @InstructionsEnabled,
					ProductDetailPage = @ProductDetailPage,
					RecLength = @RecLength,
					RecInterval = @RecInterval,
					RecOccurances = @RecOccurances
					
			WHERE   ProductId = @ProductId
			

			
		END
	ELSE
		BEGIN
			
			SELECT @SortOrder = Max(SortOrder) From {databaseOwner}[{objectQualifier}Commerce_Products] WHERE ModuleId = @ModuleId AND ProductGroupId = @ProductGroupId
			SET @SortOrder = IsNull(@SortOrder,0) + 1
			INSERT INTO {databaseOwner}[{objectQualifier}Commerce_Products]
					(PortalId, ModuleId, ProductId, ProductGroupId, ProductSKU, ProductName, ProductDescription, Price, Cost, Retail, Active, Deleted, DateAdded, SortOrder, AddToRoles, SendEmailTemplate, CustomAction, Taxable, ShipFee, ProductType, RequireShipAddress, Visible, AllowedRoles,PostOrderInstructions,InstructionsEnabled, ProductDetailPage,
					RecLength, RecInterval, RecOccurances)
			VALUES
					(@PortalId,@ModuleId,@ProductId, @ProductGroupId,@ProductSKU,@ProductName,@ProductDescription,@Price,@Cost,@Retail,@Active,0, GETDATE(), @SortOrder, @AddToRoles, @SendEmailTemplate, @CustomAction, @Taxable, @ShipFee, @ProductType, @RequireShipAddress, @Visible, @AllowedRoles,@Instructions,@InstructionsEnabled, @ProductDetailPage,
					@RecLength, @RecInterval, @RecOccurances)
		END
SELECT SCOPE_IDENTITY()








GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Dashboard_RecentCustomers]
@PortalId int
AS
SELECT  DISTINCT TOP 5 U.UserID, U.FirstName, U.LastName, U.LastName + ', ' + U.FirstName AS FullName, U.Email, U.CreatedOnDate
FROM         {databaseOwner}{objectQualifier}Commerce_Orders AS O INNER JOIN
					  {databaseOwner}{objectQualifier}Users as U on u.UserID = o.UserId
WHERE     (O.IsPaid = 1) AND (O.PortalId = @PortalId)
ORDER BY U.CreatedOnDate DESC



GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Dashboard_PendingOrders]
@PortalId int
AS

SELECT     U.FirstName, U.LastName, O.InvoiceNumber, O.OrderStatus, O.GrandTotal, O.PurchaseDate, O.IsPaid, DATEDIFF(day,O.PurchaseDate,GetDate()) as DaysPending
FROM         {databaseOwner}{objectQualifier}Commerce_Orders AS O INNER JOIN
				{databaseOwner}{objectQualifier}Users as u on o.UserId = u.UserID
WHERE     (O.IsPaid = 0) AND (O.PortalId = @PortalId)
ORDER BY DaysPending DESC



GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Users_Search](@PortalId as Integer, @Search nvarchar(100))
AS
BEGIN
SELECT  TOP 20   U.UserID, U.Username, U.FirstName, U.LastName, U.Email, U.DisplayName
FROM         {databaseOwner}{objectQualifier}Users As U INNER JOIN
					  {databaseOwner}{objectQualifier}UserPortals AS UP ON U.UserID = UP.UserId
WHERE     UP.PortalId = @PortalId AND UP.IsDeleted = 0 AND u.IsDeleted = 0 AND UP.Authorised = 1 AND 
(
	(U.UserName LIKE @Search)
	OR
	(U.DisplayName LIKE @Search)
	OR
	(U.FirstName LIKE @Search)
	OR
	(U.LastName LIKE @Search)
	OR
	(UPPER(LTRIM(RTRIM(U.FirstName))) + ' ' + UPPER(LTRIM(RTRIM(U.LastName))) LIKE UPPER(@Search))
	OR
	(U.Email LIKE @Search)
)
ORDER BY U.FirstName, U.LastName, u.DisplayName
END






GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Templates_Save]
	@TemplateId int,
	@PortalId int,
	@ModuleId int,
	@TemplateType int,
	@IsSystem bit,
	@Title nvarchar(150),
	@Subject nvarchar(200),
	@Template ntext	
AS
BEGIN
IF EXISTS (Select TemplateId FROM {databaseOwner}{objectQualifier}Commerce_Templates WHERE TemplateId = @TemplateID AND PortalId = @PortalId AND ModuleId = @ModuleID) 
	--UPDATE
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Commerce_Templates
			SET
				TemplateType = @TemplateType,
				IsSystem = @IsSystem,
				Title = @Title,
				Subject = @Subject,
				Template = @Template,
				DateUpdated = GetDate()
			WHERE
				TemplateId = @TemplateId AND PortalId = @PortalId AND ModuleId = @ModuleId
	END
ELSE
	--INSERT
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}Commerce_Templates
			(PortalId, ModuleId, TemplateType, Title, Subject, Template, DateCreated)
			VALUES
			(@PortalId, @ModuleId, @TemplateType,@Title,@Subject,@Template, GETDATE())
	SET @TemplateId = SCOPE_IDENTITY()
	END
END
SELECT @TemplateId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Templates_List]
	@PortalId int,
	@ModuleId int
AS
BEGIN 
	SELECT Count(*) FROM {databaseOwner}{objectQualifier}Commerce_Templates WHERE PortalId = @PortalId AND ModuleId = @ModuleId
END
BEGIN
	SELECT * FROM {databaseOwner}{objectQualifier}Commerce_Templates WHERE PortalID = @PortalId AND ModuleId = @ModuleId
	ORDER BY Title
END


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Templates_Delete]
	@TemplateId int,
	@PortalId int,
	@ModuleId int
	
AS
BEGIN
	If EXISTS(SELECT TemplateId FROM {databaseOwner}{objectQualifier}Commerce_Templates WHERE PortalID = @PortalId AND  TemplateId = @TemplateId AND IsSystem = 0)
		DELETE FROM {databaseOwner}{objectQualifier}Commerce_Templates WHERE PortalID = @PortalId AND TemplateId = @TemplateId
END


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Templates_Get]
	@TemplateId int,
	@PortalId int,
	@ModuleId int
	
AS
BEGIN
	SELECT * FROM {databaseOwner}{objectQualifier}Commerce_Templates WHERE PortalID = @PortalId AND TemplateId = @TemplateId
	
END


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_TaxRates_List]
@PortalId int,
@ModuleId int
AS
SELECT     TaxItemId, PortalId, ModuleId, TaxIdentifier, TaxQualifier, TaxRate
FROM         {databaseOwner}{objectQualifier}Commerce_TaxRates
WHERE     (PortalId = @PortalId AND ModuleId = @ModuleId)
ORDER By TaxIdentifier, TaxQualifier

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_TaxRates_Save]
@TaxItemId int,
@PortalId int,
@ModuleId int,
@TaxIdentifier int,
@TaxQualifier nvarchar(50),
@TaxRate float
AS
IF EXISTS(Select TaxItemId FROM {databaseOwner}{objectQualifier}Commerce_TaxRates WHERE TaxItemId = @TaxItemId)
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Commerce_TaxRates
			SET PortalId = @PortalId, ModuleId = @ModuleId, TaxIdentifier = @TaxIdentifier, TaxQualifier = @TaxQualifier, TaxRate = @TaxRate
			WHERE TaxItemId = @TaxItemId
	END
ELSE
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}Commerce_TaxRates
			(PortalId, ModuleId, TaxIdentifier, TaxQualifier, TaxRate)
			VALUES
			(@PortalId, @ModuleId, @TaxIdentifier, @TaxQualifier, @TaxRate)
	END


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_TaxRates_Get]
@PortalId int,
@TaxItemId int
AS

SELECT     TaxItemId, PortalId, ModuleId, TaxIdentifier, TaxQualifier, TaxRate
FROM         {databaseOwner}{objectQualifier}Commerce_TaxRates
WHERE     (PortalId = @PortalId) AND (TaxItemId = @TaxItemId)


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_TaxRates_GetRate]
@PortalId int,
@ModuleId int,
@City nvarchar(50),
@State nvarchar(50),
@PostalCode nvarchar(20),
@Country nvarchar(50)
AS
SELECT TaxIdentifier, TaxRate FROM {databaseOwner}{objectQualifier}Commerce_TaxRates 
WHERE PortalId = @PortalId AND ModuleId = @ModuleId AND (TaxQualifier = @City OR TaxQualifier = @State OR TaxQualifier = @PostalCode OR TaxQualifier = @Country)


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_TaxRates_Delete]
@PortalId int,
@TaxItemId int
AS 
DELETE FROM {databaseOwner}{objectQualifier}Commerce_TaxRates WHERE PortalId = @PortalId AND TaxItemId = @TaxItemId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_RepairProductSort](@ProductGroupId int)
 AS
	DECLARE @ProductId uniqueidentifier
	DECLARE @RowNum int
	DECLARE ProductList cursor for
	Select ProductId FROM {databaseOwner}[{objectQualifier}Commerce_Products] WHERE ProductGroupId = @ProductGroupId Order By SortOrder
	OPEN ProductList
	FETCH NEXT FROM ProductList 
	INTO @ProductId
	set @RowNum = 0 
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  set @RowNum = @RowNum + 1
	  UPDATE {databaseOwner}[{objectQualifier}Commerce_Products] SET SortOrder = @RowNum WHERE ProductId = @ProductId
	  FETCH NEXT FROM ProductList 
		INTO @ProductId
	END
	CLOSE ProductList
	DEALLOCATE ProductList


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO











CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Properties_Save]
@PropertyDefId int,
@PortalId int,
@PropertyName nvarchar(255),
@ObjectType int,
@ObjectOwnerKey nvarchar(50),
@DataType nvarchar(255),
@IsRequired bit,
@ValidationExpression nvarchar(2000),
@SortPriority int,
@DefaultValue nvarchar(1000),
@IsEnabled bit
AS
IF @PropertyDefId > 0 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Commerce_Properties 
			SET
				ObjectType = @ObjectType,
				ObjectOwnerKey = @ObjectOwnerKey,
				PropertyName = @PropertyName,
				DataType = @DataType,
				IsRequired = @IsRequired,
				ValidationExpression = @ValidationExpression,
				SortPriority = @SortPriority,
				DefaultValue=@DefaultValue,
				IsEnabled = @IsEnabled
			WHERE
				PortalId = @PortalId and PropertyDefId = @PropertyDefId
				
	END
ELSE
	BEGIN
		SET @SortPriority = NULL
		SET @SortPriority = (SELECT MAX(SortPriority) from {databaseOwner}{objectQualifier}Commerce_Properties WHERE PortalId = @PortalId AND ObjectType = @ObjectType AND ObjectOwnerKey = @ObjectOwnerKey)
		BEGIN
		IF @SortPriority IS NULL
			SET @SortPriority = 0
		ELSE
			SET @SortPriority = @SortPriority + 1
		END
		
		INSERT INTO {databaseOwner}{objectQualifier}Commerce_Properties 
			(PortalId, ObjectType, ObjectOwnerKey, PropertyName, DataType, IsRequired, ValidationExpression, SortPriority, DefaultValue, IsEnabled)
			VALUES
			(@PortalId, @ObjectType, @ObjectOwnerKey, @PropertyName, @DataType, @IsRequired, @ValidationExpression, @SortPriority, @DefaultValue, @IsEnabled)
			SET @PropertyDefId = SCOPE_IDENTITY()
	END
SELECT @PropertyDefId











GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Properties_RebuildSort]
@PortalId int,
@ObjectType int,
@ObjectOwnerKey nvarchar(50)
AS
DECLARE @sorttble TABLE(id int, propid int)
INSERT INTO @sorttble(id, propid)
	SELECT row-1, PropertyDefId FROM (
	SELECT ROW_NUMBER() OVER(ORDER BY SortPriority) as row, PropertyDefId from {databaseOwner}{objectQualifier}Commerce_Properties 
	WHERE PortalId = @PortalId AND ObjectType = @ObjectType AND ObjectOwnerKey = @ObjectOwnerKey
	) as r
UPDATE {databaseOwner}{objectQualifier}Commerce_Properties
SET SortPriority = s.id
FROM {databaseOwner}{objectQualifier}Commerce_Properties as m, @sorttble as s
WHERE m.PropertyDefId = s.propid





GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Properties_List]
@PortalId int,
@ObjectType int,
@ObjectOwnerKey nvarchar(50)
AS
BEGIN
	SELECT * FROM {databaseOwner}{objectQualifier}Commerce_Properties 
	WHERE PortalId = @PortalId AND ObjectType = @ObjectType AND ObjectOwnerKey = @ObjectOwnerKey
	Order By SortPriority
END







GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Properties_Get]
@PropertyDefId int,
@PortalId int
AS
BEGIN
	SELECT * FROM {databaseOwner}{objectQualifier}Commerce_Properties WHERE PortalId = @PortalId AND PropertyDefId = @PropertyDefId
END






GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_ProductGroup_Save]
	(
		@ProductGroupId int,
		@PortalId int,
		@ModuleId int,
		@GroupName nvarchar(255)
	) 
AS

	If EXISTS(Select ProductGroupId FROM {databaseOwner}{objectQualifier}Commerce_ProductGroups WHERE ProductGroupId = @ProductGroupId)
		BEGIN
			UPDATE	{databaseOwner}{objectQualifier}Commerce_ProductGroups
			SET		PortalId = @PortalId, ModuleId = @ModuleId, GroupName = @GroupName
			WHERE	ProductGroupId = @ProductGroupId
		END
	ELSE
		BEGIN
			DECLARE @SortOrder int
			SELECT @SortOrder = Max(SortOrder) From {databaseOwner}{objectQualifier}Commerce_ProductGroups WHERE ModuleId = @ModuleId
			SET @SortOrder = IsNull(@SortOrder,0) + 1
			INSERT INTO {databaseOwner}{objectQualifier}Commerce_ProductGroups
					  (PortalId, ModuleId, GroupName, SortOrder)
			VALUES     (@PortalId, @ModuleId, @GroupName, @SortOrder)
		END


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_ProductGroup_Get]
	@PortalId int,
	@ModuleId int,
	@ProductGroupId int
AS
SELECT * FROM {databaseOwner}[{objectQualifier}Commerce_ProductGroups] WHERE PortalId = @PortalId AND ModuleId = @ModuleId AND ProductGroupId = @ProductGroupId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_ProductGroup_List]
	@PortalId int,
	@ModuleId int
AS
Select * From {databaseOwner}{objectQualifier}Commerce_ProductGroups WHERE
	PortalId = @PortalId
	AND
		(
			(ModuleId = @ModuleId AND @ModuleId > -1)
			OR
			(@ModuleId = -1)
		)
	Order By SortOrder



GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_ProductGroup_ChangeSort]
	@ModuleId int,
	@ProductGroupId int,
	@SortDirection int
AS
Declare @ProductGroupSwitchId int

Declare @NewSort int
Declare @OldSort int

Select @OldSort = SortOrder From {databaseOwner}[{objectQualifier}Commerce_ProductGroups] WHERE ProductGroupId = @ProductGroupId
Select @NewSort = @OldSort + @SortDirection

Select @ProductGroupSwitchId = ProductGroupId from {databaseOwner}[{objectQualifier}Commerce_ProductGroups] WHERE ModuleId = @ModuleId AND SortOrder = @NewSort

UPDATE {databaseOwner}[{objectQualifier}Commerce_ProductGroups]
SET SortOrder = @OldSort
WHERE ProductGroupId = @ProductGroupSwitchId

UPDATE {databaseOwner}[{objectQualifier}Commerce_ProductGroups]
SET SortOrder = @NewSort
WHERE ProductGroupId = @ProductGroupId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_ProductGroup_Delete]
	@PortalId int,
	@ModuleId int,
	@ProductGroupId int,
	@DeleteProducts int
AS
BEGIN
	If @DeleteProducts = 1
		BEGIN
			DELETE From {databaseOwner}{objectQualifier}Commerce_Products WHERE PortalId = @PortalId AND ModuleId = @ModuleId AND ProductGroupId = @ProductGroupId
			DELETE FROM {databaseOwner}{objectQualifier}Commerce_ProductGroups WHERE PortalId = @PortalId AND ModuleId = @ModuleId AND ProductGroupId = @ProductGroupId
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Commerce_Products 
			SET ProductGroupId = 0
			WHERE PortalId = @PortalId AND ModuleId = @ModuleId AND ProductGroupId = @ProductGroupId
			DELETE FROM {databaseOwner}{objectQualifier}Commerce_ProductGroups WHERE PortalId = @PortalId AND ModuleId = @ModuleId AND ProductGroupId = @ProductGroupId
		END
END


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Product_List]
	@PortalId int,
	@ModuleId int,
	@ShowAll bit,
	@ShowDeleted bit
AS
If @ShowAll = 1
SELECT     P.ProductId, P.PortalId, P.ModuleId, P.ProductGroupId, P.ProductSKU, P.ProductName, P.ProductDescription, P.Price, P.Cost, P.Retail, P.SortOrder, P.Active, P.Deleted,  P.ProductDetailPage,
					  P.DateAdded, P.DateUpdated, P.RecLength, P.RecInterval, P.RecOccurances, G.GroupName, "GroupCount" = (Select Count(*) From {databaseOwner}{objectQualifier}Commerce_Products WHERE ProductGroupId = G.ProductGroupId AND Deleted = 0), P.Visible, P.AllowedRoles
FROM         {databaseOwner}{objectQualifier}Commerce_Products AS P LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}Commerce_ProductGroups AS G ON P.ProductGroupId = G.ProductGroupId
WHERE     (P.PortalId = @PortalId) 
	AND 
		(
			(@ShowDeleted = 1)
			OR
			(@ShowDeleted = 0 AND P.Deleted = 0)
		)
ORDER BY G.SortOrder, P.SortOrder
ELSE
SELECT     P.ProductId, P.PortalId, P.ModuleId, P.ProductGroupId, P.ProductSKU, P.ProductName, P.ProductDescription, P.Price, P.Cost, P.Retail, P.SortOrder, P.Active, P.Deleted,  P.ProductDetailPage,
					  P.DateAdded, P.DateUpdated, P.RecLength, P.RecInterval, P.RecOccurances, G.GroupName, "GroupCount" = (Select Count(*) From {databaseOwner}{objectQualifier}Commerce_Products WHERE ProductGroupId = G.ProductGroupId AND Deleted = 0), P.Visible, P.AllowedRoles
FROM         {databaseOwner}{objectQualifier}Commerce_Products AS P LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}Commerce_ProductGroups AS G ON P.ProductGroupId = G.ProductGroupId
WHERE     (P.PortalId = @PortalId) AND (P.Deleted = 0) AND (P.Active=1)
ORDER BY G.SortOrder, P.SortOrder

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Product_ChangeSort]
	@PortalId int,
	@ModuleId int,
	@ProductId uniqueidentifier,
	@SortDirection int
AS
Declare @ProductSwitchId uniqueidentifier
DECLARE @ProductGroupId int
SELECT @ProductGroupId = ProductGroupId From {databaseOwner}[{objectQualifier}Commerce_Products] WHERE ProductId = @ProductId
Declare @NewSort int
Declare @OldSort int

Select @OldSort = SortOrder From {databaseOwner}[{objectQualifier}Commerce_Products] WHERE ProductGroupId = @ProductGroupId AND ProductId = @ProductId
Select @NewSort = @OldSort + @SortDirection

Select @ProductSwitchId = ProductId from {databaseOwner}[{objectQualifier}Commerce_Products] WHERE PortalId = @PortalId AND ProductGroupId = @ProductGroupId AND SortOrder = @NewSort

UPDATE {databaseOwner}[{objectQualifier}Commerce_Products]
SET SortOrder = @OldSort
WHERE ProductId = @ProductSwitchId

UPDATE {databaseOwner}[{objectQualifier}Commerce_Products]
SET SortOrder = @NewSort
WHERE ProductId = @ProductId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Product_Get]
	@PortalId int,
	@ModuleId int,
	@ProductId uniqueidentifier,
	@ProductSKU nvarchar(100)
AS
SELECT * FROM {databaseOwner}[{objectQualifier}Commerce_Products] 
	WHERE 
	PortalId = @PortalId 
		AND 
			(
				(ProductId = @ProductId AND @ProductSKU = '')
				OR 
				(ProductSKU = @ProductSKU AND ProductSKU <> '' AND Deleted = 0)
			)


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Product_Delete]
	@PortalId int,
	@ModuleId int,
	@ProductId uniqueidentifier,
	@PermDelete int
AS
BEGIN
	If @PermDelete = 1
		BEGIN
			DELETE From {databaseOwner}{objectQualifier}Commerce_Products WHERE PortalId = @PortalId AND ProductId = @ProductId
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Commerce_Products 
			SET Deleted = 1
			WHERE  PortalId = @PortalId AND ProductId = @ProductId
		END
END


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderTemp_QtyUpdate]
(
	@OrderItemId uniqueidentifier,
	@Qty int,
	@Discount money
)
AS
	
DECLARE @NewQty int
	SELECT @NewQty = (Qty + @Qty) FROM {databaseOwner}[{objectQualifier}Commerce_OrderTemp] WHERE OrderItemId = @OrderItemId
	If @NewQty <= 0 
		DELETE FROM {databaseOwner}[{objectQualifier}Commerce_OrderTemp] WHERE OrderItemId = @OrderItemId
	Else
		UPDATE {databaseOwner}[{objectQualifier}Commerce_OrderTemp]
			SET Qty = @NewQty, SubTotal = ((Price * @NewQty)-@Discount), Discount = @Discount
		WHERE OrderItemId = @OrderItemId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderTemp_List]
(
	@ShopperId uniqueidentifier
)
AS
BEGIN
	SELECT     O.OrderItemId, O.SessionId, O.UserId, O.ProductId, O.Qty, O.Price, O.SubTotal, O.DateAdded, 
				O.ProductSku,
				ISNULL(P.ProductName,O.ProductName) as ProductName, P.ProductDescription,  
					  P.Cost, P.Retail, P.ProductGroupId, O.Discount, O.DiscountId, P.RequireShipAddress, P.ProductType,
					   O.Note, ISNULL(O.OrderItemData,'') as OrderItemData
FROM         {databaseOwner}[{objectQualifier}Commerce_OrderTemp] AS O LEFT OUTER JOIN
					  {databaseOwner}[{objectQualifier}Commerce_Products] AS P ON O.ProductId = P.ProductId WHERE O.ShopperId = @ShopperId
			   
END







GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderTemp_Delete]
(
	@ShopperId uniqueidentifier
)
AS
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}Commerce_OrderTemp]
	WHERE ShopperId = @ShopperId
END




GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderTemp_Add]
(
	@SessionId nvarchar(50),
	@UserId int,
	@ProductId uniqueidentifier,
	@Qty int,
	@Price money,
	@SubTotal money,
	@Discount money,
	@DiscountId int,
	@Note nvarchar(1000),
	@ShopperId uniqueidentifier,
	@ProductSku nvarchar(50),
	@ProductName nvarchar(255)
)
AS
BEGIN
	IF EXISTS(SELECT OrderItemId FROM  {databaseOwner}[{objectQualifier}Commerce_OrderTemp] WHERE ShopperId = @ShopperId AND ProductSku = @ProductSku)
		UPDATE {databaseOwner}[{objectQualifier}Commerce_OrderTemp]
			SET UserId = @UserId,
				Qty = @Qty,
				Price = @Price,
				Subtotal = @SubTotal,
				Discount = @Discount,
				DiscountId = @DiscountId,
				ProductSku = @ProductSku,
				ProductName = @ProductName
			WHERE
				ShopperId = @ShopperId AND ProductSku = @ProductSku
	ELSE
	INSERT INTO {databaseOwner}[{objectQualifier}Commerce_OrderTemp]
					  (SessionId, UserId, ProductId, Qty, Price, SubTotal, Discount, DiscountId, Note, ShopperId, ProductSku, ProductName)
	VALUES     (@SessionId, @UserId, @ProductId, @Qty, @Price, @SubTotal, @Discount, @DiscountId, @Note, @ShopperId, @ProductSku, @ProductName)
END






GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderTemp_DeleteItem]
(
	@OrderItemId uniqueidentifier
)
AS
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}Commerce_OrderTemp]
	WHERE OrderItemId = @OrderItemId
END




GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderStatus_Save]
(
	@PortalId int,
	@ModuleId int,
	@OrderStatusId int,
	@DisplayText nvarchar(100)
)
AS
IF EXISTS (SELECT OrderStatusId From {databaseOwner}{objectQualifier}Commerce_OrderStatus WHERE PortalId = @PortalId AND OrderStatusId = @OrderStatusId)
	UPDATE {databaseOwner}{objectQualifier}Commerce_OrderStatus
		SET DisplayText = @DisplayText WHERE OrderStatusId = @OrderStatusId
ELSE
	BEGIN
	DECLARE @SortOrder int
	SELECT @SortOrder = (Max(SortOrder) + 1) From {databaseOwner}{objectQualifier}Commerce_OrderStatus WHERE PortalId = @PortalId AND ModuleId = @ModuleId
	INSERT INTO {databaseOwner}{objectQualifier}Commerce_OrderStatus
		(PortalId, ModuleId, DisplayText, SortOrder)
		VALUES
		(@PortalId, @ModuleId, @DisplayText, IsNull(@SortOrder,1))
	END

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderStatus_Get]
(
	@PortalId int,
	@OrderStatusId int
)
AS
SELECT * From {databaseOwner}{objectQualifier}Commerce_OrderStatus WHERE PortalId = @PortalId AND OrderStatusId = @OrderStatusId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderStatus_List]
(
	@PortalId int,
	@ModuleId int
)
AS
SELECT * From {databaseOwner}{objectQualifier}Commerce_OrderStatus WHERE PortalId = @PortalId AND ModuleId = @ModuleId ORDER BY SortOrder


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrdersDetails_From_Temp]
(
	@ShopperId nvarchar(50),
	@UserId int,
	@OrderId uniqueidentifier
)
AS
DECLARE @sId uniqueidentifier
SET @sId = CAST(@ShopperId as uniqueidentifier)
BEGIN

INSERT INTO {databaseOwner}{objectQualifier}Commerce_OrderDetails
	(OrderId, ProductId, Qty, Price, Disc, Misc, Deleted, DiscountId, SubTotal, OrderItemData, ProductSku, ProductName)
	SELECT @OrderId, ProductId, Qty, Price, Discount,0,0, DiscountId, SubTotal, CASE WHEN OrderItemData = '' THEN '<orderitemdata><properties /><custom /></orderitemdata>' ELSE '<orderitemdata>' + OrderItemData + '<custom /></orderitemdata>' END, ProductSku, ProductName FROM {databaseOwner}{objectQualifier}Commerce_OrderTemp WHERE ShopperId = @sId
END
DELETE FROM {databaseOwner}{objectQualifier}Commerce_OrderTemp WHERE ShopperId = @sId
UPDATE {databaseOwner}{objectQualifier}Commerce_Orders_PostLog
	SET OrderId = @OrderId 
	WHERE OrderId = '00000000-0000-0000-0000-000000000000' AND UPPER(ShopperSessionId) = UPPER(@ShopperId)


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderStatus_Delete]
(
	@PortalId int,
	@OrderStatusId int
)
AS
DELETE From {databaseOwner}{objectQualifier}Commerce_OrderStatus WHERE PortalId = @PortalId AND OrderStatusId = @OrderStatusId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_SearchHistory]
@UserId int,
@ProductId uniqueidentifier,
@QualStartDate datetime,
@QualEndDate datetime
AS
SELECT     Count(*)
FROM         {databaseOwner}{objectQualifier}Commerce_Orders AS O INNER JOIN
					  {databaseOwner}{objectQualifier}Commerce_OrderDetails AS OD ON O.OrderId = OD.OrderId
WHERE O.UserId = @UserId AND OD.ProductId = @ProductId AND O.PurchaseDate > @QualStartDate AND O.PurchaseDate < @QualEndDate


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_Search](                                                                                                                                                                                                            
@PortalId int,
@RowIndex int,
@MaxRows int,
@SortColumn nvarchar(50),
@SortDirection nvarchar(4),
@Query nvarchar(50),
@PaidOnly int                                                                                                                                                                                                                                      
)                                                                                                                                                                                                                                                               
AS                                                                                                                                                                                                                                                              
WITH Orders AS 
(
SELECT OrderId,
 ROW_NUMBER() OVER (ORDER BY 
		CASE WHEN @SortColumn = 'InvoiceNumber' AND @SortDirection = 'ASC' THEN InvoiceNumber END ASC,
		CASE WHEN @SortColumn = 'InvoiceNumber' AND @SortDirection = 'DESC' THEN InvoiceNumber END DESC,
		CASE WHEN @SortColumn = 'PurchaseDate' AND @SortDirection = 'ASC' THEN PurchaseDate END ASC,
		CASE WHEN @SortColumn = 'PurchaseDate' AND @SortDirection = 'DESC' THEN PurchaseDate END DESC,
		CASE WHEN @SortColumn = 'GrandTotal' AND @SortDirection = 'ASC' THEN GrandTotal END ASC,
		CASE WHEN @SortColumn = 'GrandTotal' AND @SortDirection = 'DESC' THEN GrandTotal END DESC,
		CASE WHEN @SortColumn = 'CustomerName' AND @SortDirection = 'ASC' THEN CustomerName END ASC,
		CASE WHEN @SortColumn = 'CustomerName' AND @SortDirection = 'DESC' THEN CustomerName END DESC,
		CASE WHEN @SortColumn = 'Source' AND @SortDirection = 'ASC' THEN [Source] END ASC,
		CASE WHEN @SortColumn = 'Source' AND @SortDirection = 'DESC' THEN [Source] END DESC,
		CASE WHEN @SortColumn = 'DatePaid' AND @SortDirection = 'ASC' THEN DatePaid END ASC,
		CASE WHEN @SortColumn = 'DatePaid' AND @SortDirection = 'DESC' THEN DatePaid END DESC,
		CASE WHEN @SortColumn = 'Username' AND @SortDirection = 'ASC' THEN Username END ASC,
		CASE WHEN @SortColumn = 'Username' AND @SortDirection = 'DESC' THEN Username END DESC,
		CASE WHEN @SortColumn = 'DisplayName' AND @SortDirection = 'ASC' THEN DisplayName END ASC,
		CASE WHEN @SortColumn = 'DisplayName' AND @SortDirection = 'DESC' THEN DisplayName END DESC
		) as 'RowNumber'
		FROM {databaseOwner}{objectQualifier}Commerce_Orders as o INNER JOIN 
		{databaseOwner}{objectQualifier}Users as u ON u.UserID = o.UserId
		WHERE 
			(
				(InvoiceNumber LIKE @Query + '%' AND @Query <> '')
				OR
				(PurchaseDate LIKE @Query + '%' AND @Query <> '')
				OR
				(GrandTotal LIKE @Query AND @Query <> '')
				OR
				(CustomerName LIKE @Query + '%' AND @Query <> '')
				OR
				([Source] LIKE @Query + '%' AND @Query <> '')
				OR
				(Username LIKE @Query + '%' AND @Query <> '')
				OR
				(DisplayName LIKE @Query + '%' AND @Query <> '')
				OR
				(Email LIKE @Query + '%' AND @Query <> '')
				OR 
				(CAST(DATEPART(MONTH,PurchaseDate)as nvarchar(50))  + ' ' + CAST(DATEPART(YYYY,PurchaseDate) as nvarchar(50)) = @Query)
				OR 
				(DATENAME(MONTH,PurchaseDate)  + ' ' + CAST(DATEPART(YYYY,PurchaseDate) as nvarchar(50)) = @Query)
				OR 
				(DATENAME(MONTH,PurchaseDate)  + ' ' + CAST(DATEPART(D,PurchaseDate) as nvarchar(5)) + ' ' + CAST(DATEPART(YYYY,PurchaseDate) as nvarchar(50)) = @Query)
				OR 
				(@Query = '')
				OR
				(
					@Query <> '' 
					AND
					OrderId IN (
								SELECT od.OrderId FROM {databaseOwner}{objectQualifier}Commerce_OrderDetails as od 
								INNER JOIN {databaseOwner}{objectQualifier}Commerce_Products as P on P.ProductId = od.ProductId 
								WHERE p.PortalId = @PortalId AND p.ProductName LIKE @Query)
				)
			) 
			AND 
			(PortalId = @PortalId AND o.IsDeleted = 0)
			AND
			(
				(@PaidOnly = -1)
				OR
				(@PaidOnly = 1 AND IsPaid =1)
				OR
				(@PaidOnly = 0 AND IsPaid = 0)
			)
				
)
SELECT * FROM {databaseOwner}[{objectQualifier}vw_Commerce_OrdersList] as O
		INNER JOIN Orders as tmp ON tmp.OrderId = O.OrderId
WHERE tmp.RowNumber BETWEEN @RowIndex AND ((@RowIndex + @MaxRows)-1);


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_PostLog_Save]
@OrderId uniqueidentifier,
@ShopperId nvarchar(50),
@ActionName nvarchar(50),
@Status int,
@Note nvarchar(1000)
AS
INSERT INTO {databaseOwner}{objectQualifier}Commerce_Orders_PostLog
					  (OrderId, ShopperSessionId,  ActionName, [Status], Note, DateCreated)
VALUES     (@OrderId, @ShopperId,  @ActionName, @Status, @Note, GetDate())




GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_PostLog_List]
@OrderId uniqueidentifier
AS
SELECT     ProcessLogId, OrderId,ShopperSessionId, ActionName, [Status], Note, DateCreated
FROM         {databaseOwner}{objectQualifier}Commerce_Orders_PostLog
WHERE OrderId = @OrderId
Order By ProcessLogId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_ListByCustomer](
	@ModuleId int,
	@PortalId int,
	@PageIndex int,	
	@PageSize int,
	@Sort varchar(4) = "DESC",
	@SortColumn varchar(50) = "PurchaseDate",
	@CustomerId int,
	@Status int = -1

)
AS

DECLARE @PageLowerBound int
DECLARE @PageUpperBound int
DECLARE @RowsToReturn int
DECLARE @sql nvarchar(2000)
SET @sql = ''
SET @PageLowerBound = @PageSize * @PageIndex
SET @PageUpperBound = @PageLowerBound + @PageSize + 1
SET @RowsToReturn = @PageSize * (@PageIndex + 1)
SET ROWCOUNT @RowsToReturn
Create TABLE #PageIndex
(
	IndexId int IDENTITY (1, 1) NOT NULL,
	OrderId uniqueidentifier
)
DECLARE @sqlP nvarchar(2000)
			SET @sql = ' PortalId = ''' + Convert(varchar(50),@PortalId) + ''' AND UserId = ''' + Convert(varchar(50),@CustomerId) + ''''
		-- Search Criteria

			
			

	BEGIN
			-- Record Count
			select @sqlP = 'SELECT Count(*) from {databaseOwner}{objectQualifier}vw_Commerce_OrdersList '
			
			if @sql <> ''
				set @sql = ' WHERE ' + @sql
			
			select @sqlP = @sqlP + @sql 
			
			exec sp_executesql  @sqlP 
		END
		select @sqlP = 'INSERT INTO #PageIndex (OrderId) 
						SELECT OrderId FROM {databaseOwner}{objectQualifier}vw_Commerce_OrdersList '
		
					select @sql = @sql + ' ORDER BY ' + @SortColumn + ' ' + @Sort

				select @sqlP = @sqlP + @sql
	   -- print @sqlP
		exec sp_executesql @sqlP 
Select O.* From {databaseOwner}{objectQualifier}vw_Commerce_OrdersList as O, #PageIndex PageIndex
WHERE O.OrderId = PageIndex.OrderId AND PageIndex.IndexId > @PageLowerBound AND PageIndex.IndexId < @PageUpperBound
Order By PageIndex.IndexId



GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_List](                                                                                                                                                                                                            
	@ModuleId int,                                                                                                                                                                                                                                              
	@PortalId int,                                                                                                                                                                                                                                              
	@PageIndex int,                                                                                                                                                                                                                                             
	@PageSize int,                                                                                                                                                                                                                                              
	@Sort varchar(4) = "DESC",                                                                                                                                                                                                                                  
	@SortColumn varchar(50) = "PurchaseDate",                                                                                                                                                                                                                   
	@Search nvarchar(255) = "*",                                                                                                                                                                                                                                
	@Status int = -1                                                                                                                                                                                                                                            
																																																																
)                                                                                                                                                                                                                                                               
AS                                                                                                                                                                                                                                                              
																																																																
DECLARE @PageLowerBound int                                                                                                                                                                                                                                     
DECLARE @PageUpperBound int                                                                                                                                                                                                                                     
DECLARE @RowsToReturn int                                                                                                                                                                                                                                       
DECLARE @sql nvarchar(2000)                                                                                                                                                                                                                                     
SET @sql = ''                                                                                                                                                                                                                                                   
SET @PageLowerBound = @PageSize * @PageIndex                                                                                                                                                                                                                    
SET @PageUpperBound = @PageLowerBound + @PageSize + 1                                                                                                                                                                                                           
SET @RowsToReturn = @PageSize * (@PageIndex + 1)                                                                                                                                                                                                                
SET ROWCOUNT @RowsToReturn                                                                                                                                                                                                                                      
Create TABLE #PageIndex                                                                                                                                                                                                                                         
(                                                                                                                                                                                                                                                               
	IndexId int IDENTITY (1, 1) NOT NULL,                                                                                                                                                                                                                       
	OrderId uniqueidentifier                                                                                                                                                                                                                                    
)                                                                                                                                                                                                                                                               
DECLARE @sqlP nvarchar(2000)                                                                                                                                                                                                                                    
			SET @sql = ' PortalId = ''' + Convert(varchar(50),@PortalId) + '''' -- AND ModuleId = ''' + Convert(varchar(50),@ModuleId) + ''''                                                                                                                   
		-- Search Criteria                                                                                                                                                                                                                                      
			BEGIN                                                                                                                                                                                                                                               
			if @Status <> -1                                                                                                                                                                                                                                    
				BEGIN                                                                                                                                                                                                                                           
				if Len(@sql) > 0                                                                                                                                                                                                                                
							SET @sql = @sql + ' AND '                                                                                                                                                                                                           
				select @sql = @sql + 'OrderStatusId = ' + Convert(varchar(50),@Status)                                                                                                                                                                          
				END                                                                                                                                                                                                                                             
																																																																
			if @Search <> '*'                                                                                                                                                                                                                                   
				BEGIN                                                                                                                                                                                                                                           
					if Len(@sql) > 0                                                                                                                                                                                                                            
							SET @sql = @sql + ' AND '                                                                                                                                                                                                           
				select @sql = @sql + ' (InvoiceNumber LIKE ''' + @Search + '%'' OR PurchaseDate LIKE ''' + @Search + ''' OR CustomerName LIKE ''%' + @Search + '%'')'                                                                                           
				END                                                                                                                                                                                                                                             
			END                                                                                                                                                                                                                                                 
																																																																
	BEGIN                                                                                                                                                                                                                                                       
			-- Record Count                                                                                                                                                                                                                                     
			select @sqlP = 'SELECT Count(*) from {databaseOwner}{objectQualifier}vw_Commerce_OrdersList '                                                                                                                                                                             
																																																																
			if @sql <> ''                                                                                                                                                                                                                                       
				set @sql = ' WHERE ' + @sql                                                                                                                                                                                                                     
																																																																
			select @sqlP = @sqlP + @sql                                                                                                                                                                                                                         
																																																																
			exec sp_executesql  @sqlP                                                                                                                                                                                                                           
		END                                                                                                                                                                                                                                                     
		select @sqlP = 'INSERT INTO #PageIndex (OrderId)                                                                                                                                                                                                        
						SELECT OrderId FROM {databaseOwner}{objectQualifier}vw_Commerce_OrdersList '                                                                                                                                                                                  
																																																																
					select @sql = @sql + ' ORDER BY ' + @SortColumn + ' ' + @Sort                                                                                                                                                                               
																																																																
				select @sqlP = @sqlP + @sql                                                                                                                                                                                                                     
	   -- print @sqlP                                                                                                                                                                                                                                           
		exec sp_executesql @sqlP                                                                                                                                                                                                                                
Select O.* From {databaseOwner}{objectQualifier}vw_Commerce_OrdersList as O, #PageIndex PageIndex                                                                                                                                                                                     
WHERE O.OrderId = PageIndex.OrderId AND PageIndex.IndexId > @PageLowerBound AND PageIndex.IndexId < @PageUpperBound                                                                                                                                             
Order By PageIndex.IndexId  


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_GetLast]
@PortalId int,
@UserId int
AS
SELECT TOP 1 * from {databaseOwner}{objectQualifier}Commerce_Orders WHERE PortalId = @PortalId AND UserId = @UserId
ORDER BY DatePaid DESC


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_GetByOrderNumber](
@ModuleId int,
@PortalId int,
@OrderNumber nvarchar(50),
@UserId int
)
AS
SELECT     O.OrderId, O.InvoiceNumber, O.DatePaid, O.IsPaid, O.ModuleId, O.PortalId, O.UserId, O.ShipAddressId, O.BillAddressId, O.PurchaseDate, O.PaymentMethod, 
					  O.PaymentRef, O.PaymentCustom1, O.PaymentCustom2, IsNULL(O.SubTotal,0) as SubTotal, O.Tax, O.Disc, O.Misc, O.Shipping, 
					  ISNULL(O.GrandTotal,0) as GrandTotal, O.DateUpdated, O.OrderNote, O.OrderStatus, O.DiscountId,
					  (CASE WHEN IsNull(U.Username, '') = '' THEN O.CustomerName ELSE U.FirstName + ' ' + U.LastName END) AS CustomerName, ISNULL(O.Source, '') AS Source, 
					  O.SalesRepId, O.CustomerId,
					  o.ShipTo, o.BillTo
FROM	{databaseOwner}{objectQualifier}Commerce_Orders AS O LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}Users AS U ON O.UserId = U.UserID WHERE O.InvoiceNumber = @OrderNumber AND O.UserId = @UserId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_Get](
@ModuleId int,
@PortalId int,
@OrderId uniqueidentifier
)
AS
SELECT     O.OrderId, O.InvoiceNumber, O.DatePaid, O.IsPaid, O.ModuleId, O.PortalId, O.UserId, O.ShipAddressId, O.BillAddressId, O.PurchaseDate, O.PaymentMethod, 
					  O.PaymentRef, O.PaymentCustom1, O.PaymentCustom2, IsNULL(O.SubTotal,0) as SubTotal, O.Tax, O.Disc, O.Misc, O.Shipping, 
					  ISNULL(O.GrandTotal,0) as GrandTotal, O.DateUpdated, O.OrderNote, O.OrderStatus, O.DiscountId,
					  (CASE WHEN IsNull(C.Username, '') = '' THEN O.CustomerName ELSE C.FirstName + ' ' + C.LastName END) AS CustomerName, ISNULL(O.Source, '') AS Source, 
					  O.SalesRepId, O.CustomerId,
					  o.ShipTo, o.BillTo
FROM         {databaseOwner}{objectQualifier}Commerce_Orders AS O INNER JOIN
			{databaseOwner}{objectQualifier}Users as c ON c.UserID = O.UserId
WHERE O.PortalId = @PortalId AND OrderId = @OrderId






GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Orders_Delete](
@PortalId int,
@ModuleId int,
@OrderId uniqueidentifier
)
AS
DELETE FROM {databaseOwner}{objectQualifier}Commerce_OrderDetails WHERE OrderId = @OrderId
DELETE FROM {databaseOwner}{objectQualifier}Commerce_Orders WHERE OrderId = @OrderId
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderDetails_List](
@OrderId uniqueidentifier
)
AS
SELECT     O.OrderDetailsId, O.OrderId, O.ProductId, O.Price, O.Qty, O.Disc, O.Misc, O.Deleted, O.DiscountId, IsNull(P.ProductSKU,O.ProductSku) as ProductSKU, IsNull(P.ProductName,O.ProductName) as ProductName, 
					  IsNull(P.ProductDescription,'') as ProductDescription, IsNull(P.Price,0) AS ProductPrice, IsNull(P.Cost,0) as Cost, IsNull(P.Retail,0) as Retail, ISNULL(D.Description, '') AS DiscountDesc, O.SubTotal, ISNULL(O.Note, '') AS Note, 
					  ISNULL(D.DiscountAmount, 0) AS DiscountAmount, ISNULL(D.DiscountPercent, 0) AS DiscountPercent,
					  O.AgreementIds,CASE WHEN p.InstructionsEnabled =1 Then IsNull(P.PostOrderInstructions,'') Else '' END  as PostOrderInstructions, ISNULL(o.OrderItemData,'') as OrderItemData
FROM         {databaseOwner}{objectQualifier}Commerce_OrderDetails AS O LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}Commerce_Products AS P ON O.ProductId = P.ProductId LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}Commerce_Discounts AS D ON O.DiscountId = D.DiscountId
WHERE     (O.OrderId = @OrderId) AND (O.Deleted = 0)








GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderDetails_Get](
@OrderDetailsId uniqueidentifier,
@OrderId uniqueidentifier
)
AS
SELECT     O.OrderDetailsId, O.OrderId, O.ProductId, O.Price, O.Qty, O.Disc, O.Misc, O.Deleted, O.DiscountId, IsNull(P.ProductSKU,O.ProductSku) as ProductSKU, IsNull(P.ProductName,O.ProductName) as ProductName, 
					  IsNull(P.ProductDescription,'') as ProductDescription, IsNull(P.Price,0) AS ProductPrice, IsNull(P.Cost,0) as Cost, IsNull(P.Retail,0) as Retail, ISNULL(D.Description, '') AS DiscountDesc, O.SubTotal, ISNULL(O.Note, '') AS Note, 
					  ISNULL(D.DiscountAmount, 0) AS DiscountAmount, ISNULL(D.DiscountPercent, 0) AS DiscountPercent,
					  O.AgreementIds,CASE WHEN p.InstructionsEnabled =1 Then IsNull(P.PostOrderInstructions,'') Else '' END  as PostOrderInstructions
FROM         {databaseOwner}{objectQualifier}Commerce_OrderDetails AS O LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}Commerce_Products AS P ON O.ProductId = P.ProductId LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}Commerce_Discounts AS D ON O.DiscountId = D.DiscountId
WHERE     O.OrderId = @OrderId AND O.Deleted = 0 AND O.OrderDetailsId = @OrderDetailsId






GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderDetails_Delete](
@OrderId uniqueidentifier,
@OrderDetailsId uniqueidentifier
)
AS
DELETE From {databaseOwner}{objectQualifier}Commerce_OrderDetails WHERE OrderDetailsId = @OrderDetailsId
DECLARE @OrderSubTotal money
DECLARE @GrandTotal money
SET @OrderSubTotal = (SELECT SUM(SubTotal) FROM {databaseOwner}{objectQualifier}Commerce_OrderDetails WHERE OrderId = @OrderId and Deleted = 0)
SET @GrandTotal = (SELECT @OrderSubTotal + IsNull(Tax,0) + IsNull(Disc,0) + IsNull(Misc,0)  FROM {databaseOwner}{objectQualifier}Commerce_Orders WHERE OrderId = @OrderId)
UPDATE {databaseOwner}{objectQualifier}Commerce_Orders
	SET SubTotal = ISNULL(@OrderSubTotal,0),
	GrandTotal = ISNULL(@GrandTotal,0)
WHERE OrderId = @OrderId




GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Order_Save]
(
	@OrderId uniqueidentifier,
	@InvoiceNumber nvarchar(50),
	@ModuleId int,
	@PortalId int,
	@UserId int,
	@PurchaseDate datetime,
	@PaymentMethod nvarchar(50),
	@PaymentRef nvarchar(50),
	@PaymentCustom1 nvarchar(50),
	@PaymentCustom2 nvarchar(50),
	@SubTotal money,
	@Tax money,
	@Disc money,
	@Misc money,
	@Shipping money,
	@GrandTotal money,
	@OrderNote nvarchar(1000),
	@OrderStatus int,
	@CustomerName nvarchar(255),
	@Source nvarchar(255),
	@SalesRepId int = 0,
	@DatePaid datetime,
	@IsPaid bit,
	@CustomerId int,
	@DiscountId int,
	@ShipTo nvarchar(1000),
	@BillTo nvarchar(1000),
	@IsDeleted bit
	
	
)
AS
IF EXISTS (SELECT OrderId From {databaseOwner}{objectQualifier}Commerce_Orders WHERE OrderId = @OrderId)
	UPDATE {databaseOwner}{objectQualifier}Commerce_Orders
		SET InvoiceNumber = @InvoiceNumber,
			UserId = @UserId,
			PurchaseDate = @PurchaseDate,
			PaymentMethod = @PaymentMethod,
			PaymentRef = @PaymentRef,
			PaymentCustom1 = @PaymentCustom1,
			PaymentCustom2 = @PaymentCustom2,
			SubTotal = @SubTotal,
			Tax = @Tax,
			Disc = @Disc,
			Misc = @Misc,
			Shipping = @Shipping,
			GrandTotal = @GrandTotal,
			OrderNote = @OrderNote,
			OrderStatus = @OrderStatus,
			DateUpdated = GetDate(),
			CustomerName = @CustomerName,
			Source = @Source,
			SalesRepId = @SalesRepId,
			DatePaid = @DatePaid,
			IsPaid = @IsPaid,
			CustomerId = @CustomerId,
			DiscountId = @DiscountId,
			ShipTo = @ShipTo,
			BillTo = @BillTo,
			IsDeleted = @IsDeleted

		WHERE OrderId = @OrderId AND ModuleId = @ModuleId AND PortalId = @PortalId
ELSE
	BEGIN
	INSERT INTO {databaseOwner}{objectQualifier}Commerce_Orders
		(OrderId,InvoiceNumber,ModuleId, PortalId, UserId, ShipTo, BillTo, PurchaseDate, PaymentMethod,
		PaymentRef, PaymentCustom1, PaymentCustom2, SubTotal, Tax, Disc, Misc, Shipping, GrandTotal, OrderNote, OrderStatus, CustomerName, Source, SalesRepId, DatePaid, IsPaid, CustomerId, DiscountId)
		VALUES
		(@OrderId,@InvoiceNumber,@ModuleId, @PortalId, @UserId, @ShipTo, @BillTo, @PurchaseDate, @PaymentMethod,
		@PaymentRef, @PaymentCustom1, @PaymentCustom2, @SubTotal, @Tax, @Disc, @Misc, @Shipping, @GrandTotal, @OrderNote, @OrderStatus, @CustomerName, @Source, @SalesRepId, @DatePaid, @IsPaid, @CustomerId, @DiscountId)
	END
SELECT @OrderId




GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_GetUsers](@PortalId as Integer)
AS
BEGIN
SELECT     {databaseOwner}{objectQualifier}Users.UserID, {databaseOwner}{objectQualifier}Users.Username, {databaseOwner}{objectQualifier}Users.FirstName, {databaseOwner}{objectQualifier}Users.LastName, {databaseOwner}{objectQualifier}Users.Email, {databaseOwner}{objectQualifier}Users.DisplayName
FROM         {databaseOwner}{objectQualifier}Users INNER JOIN
					  {databaseOwner}{objectQualifier}UserPortals ON {databaseOwner}{objectQualifier}Users.UserID = {databaseOwner}{objectQualifier}UserPortals.UserId
WHERE     ({databaseOwner}{objectQualifier}UserPortals.PortalId = @PortalId)
ORDER BY {databaseOwner}{objectQualifier}Users.Username
END


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_Save]
@FileId uniqueidentifier,
@FileName nvarchar(255),
@Title nvarchar(255),
@Description nvarchar(max),
@RequiresAgreement bit,
@RequiresRole bit,
@IsDeleted bit,
@FileData image,
@FileSize int,
@ContentType nvarchar(255),
@PortalId int
AS
IF EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}Commerce_Files WHERE FileId = @FileId) 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Commerce_Files
			SET FileName = @FileName, 
			Title = @Title,
			Description = @Description,
			RequiresAgreement = @RequiresAgreement,
			RequiresRole = @RequiresRole,
			IsDeleted = @IsDeleted,
			FileData = @FileData,
			ContentType = @ContentType,
			DateUpdated = GETUTCDATE()
		WHERE FileId = @FileId and PortalId = @PortalId
	END
ELSE
	BEGIN
		SET @FileId = NEWID()
			INSERT INTO {databaseOwner}{objectQualifier}Commerce_Files
				(FileId,FileName,Title,Description,RequiresAgreement,RequiresRole, IsDeleted,FileData,ContentType,FileSize,PortalId)
				VALUES
				(@FileId,@FileName,@Title,@Description,@RequiresAgreement,@RequiresRole, @IsDeleted,@FileData,@ContentType,@FileSize,@PortalId)
	END
SELECT @FileId




GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_UserFiles]
@UserId int
AS
SELECT f.*,pf.* from {databaseOwner}{objectQualifier}Commerce_Files as f
INNER JOIN {databaseOwner}{objectQualifier}Commerce_Product_Files as pf ON pf.FileId = f.FileId
INNER JOIN {databaseOwner}{objectQualifier}Commerce_Products as p ON p.ProductId = pf.ProductId
 INNER JOIN (
SELECT f.FileId
FROM {databaseOwner}{objectQualifier}Commerce_Files as f INNER JOIN 
	{databaseOwner}{objectQualifier}Commerce_Product_Files AS pf ON pf.FileId = f.FileId INNER JOIN
	{databaseOwner}{objectQualifier}Commerce_OrderDetails as od ON od.ProductId = pf.ProductId INNER JOIN
	{databaseOwner}{objectQualifier}Commerce_Orders as o ON o.OrderId = od.OrderId
WHERE o.PurchaseDate >=pf.PurchaseDate AND o.UserId = @UserId
GROUP BY f.FileId) as ft ON ft.FileId = f.FileId
Order By f.DateCreated DESC







GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_OrderItem]
@OrderDetailsId uniqueidentifier,
@UserId int
AS
SELECT f.*,pf.* from {databaseOwner}{objectQualifier}Commerce_Files as f
INNER JOIN {databaseOwner}{objectQualifier}Commerce_Product_Files as pf ON pf.FileId = f.FileId
INNER JOIN {databaseOwner}{objectQualifier}Commerce_Products as p ON p.ProductId = pf.ProductId
INNER JOIN {databaseOwner}{objectQualifier}Commerce_OrderDetails as od ON od.ProductId = pf.ProductId
 INNER JOIN (
SELECT f.FileId
FROM {databaseOwner}{objectQualifier}Commerce_Files as f INNER JOIN 
	{databaseOwner}{objectQualifier}Commerce_Product_Files AS pf ON pf.FileId = f.FileId INNER JOIN
	{databaseOwner}{objectQualifier}Commerce_OrderDetails as od ON od.ProductId = pf.ProductId INNER JOIN
	{databaseOwner}{objectQualifier}Commerce_Orders as o ON o.OrderId = od.OrderId
WHERE o.PurchaseDate >= pf.PurchaseDate AND od.OrderDetailsId = @OrderDetailsId
GROUP BY f.FileId) as ft ON ft.FileId = f.FileId
WHERE od.OrderDetailsId = @OrderDetailsId








GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_GetProduct]
@FileProductKey uniqueidentifier
AS
SELECT f.*,pf.* FROM {databaseOwner}{objectQualifier}Commerce_Files as f
	 INNER JOIN
	 {databaseOwner}{objectQualifier}Commerce_Product_Files as pf ON f.FileId = pf.FileId
	WHERE pf.FileProductKey = @FileProductKey




GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_ListByProduct]
@ProductId uniqueidentifier
AS
SELECT f.*,pf.* FROM {databaseOwner}{objectQualifier}Commerce_Files as f
	 INNER JOIN
	 {databaseOwner}{objectQualifier}Commerce_Product_Files as pf ON f.FileId = pf.FileId
	WHERE pf.ProductId = @ProductId





GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_Get]
@FileId uniqueidentifier
AS
SELECT * FROM {databaseOwner}{objectQualifier}Commerce_Files WHERE FileId = @FileId



GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_Download]
@FileId uniqueidentifier,
@UserId int
AS
SELECT f.*,pf.* from {databaseOwner}{objectQualifier}Commerce_Files  as f 
INNER JOIN {databaseOwner}{objectQualifier}Commerce_Product_Files as pf ON pf.FileId = f.FileId
WHERE f.FileId = @FileId AND f.FileId
	 IN (
		SELECT f.FileId
			FROM {databaseOwner}{objectQualifier}Commerce_Files as f INNER JOIN 
			{databaseOwner}{objectQualifier}Commerce_Product_Files AS pf ON pf.FileId = f.FileId INNER JOIN
			{databaseOwner}{objectQualifier}Commerce_OrderDetails as od ON od.ProductId = pf.ProductId INNER JOIN
			{databaseOwner}{objectQualifier}Commerce_Orders as o ON o.OrderId = od.OrderId
		WHERE f.FileId = @FileId AND o.UserId = @UserId AND o.IsPaid = 1 AND o.IsDeleted = 0 AND o.PurchaseDate >= pf.PurchaseDate)





GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_Delete]
@FileId uniqueidentifier
AS
DELETE FROM {databaseOwner}{objectQualifier}Commerce_Product_Files WHERE FileId = @FileId
DELETE FROM {databaseOwner}{objectQualifier}Commerce_File_Log WHERE FileId = @FileId
DELETE FROM {databaseOwner}{objectQualifier}Commerce_Files WHERE FileId = @FileId



GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Files_AddToProduct]
@FileId uniqueidentifier,
@ProductId uniqueidentifier,
@PurchaseDate datetime
AS
DECLARE @FileProductKey uniqueidentifier
IF EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}Commerce_Product_Files WHERE ProductId = @ProductId AND FileId = @FileId)
	SELECT @FileProductKey = FileProductKey FROM {databaseOwner}{objectQualifier}Commerce_Product_Files WHERE ProductId = @ProductId AND FileId = @FileId
ELSE
BEGIN
	SET @FileProductKey = NEWID()
	INSERT INTO {databaseOwner}{objectQualifier}Commerce_Product_Files
		(FileProductKey, FileId, ProductId, PurchaseDate)
		VALUES
		(@FileProductKey, @FileId, @ProductId, @PurchaseDate)
END
SELECT @FileProductKey





GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_File_LogSave]
@FileId uniqueidentifier,
@FileProductKey uniqueidentifier,
@UserId int,
@IPAddress nvarchar(25),
@UserAgent nvarchar(255),
@Referrer nvarchar(1000)
AS
INSERT INTO {databaseOwner}{objectQualifier}Commerce_File_Log
	(FileId, UserId, DateCreated,IPAddress,UserAgent,Referrer,FileProductKey)
	VALUES
	(@FileId, @UserId, GETUTCDATE(),@IPAddress,@UserAgent,@Referrer,@FileProductKey)



GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discounts_Search]
@PortalId int,
@RowIndex int,
@MaxRows int,
@SortColumn nvarchar(50),
@SortDirection nvarchar(4),
@Query nvarchar(50),
@ActiveOnly bit
AS
WITH Discounts AS 
(
SELECT DiscountId,
 ROW_NUMBER() OVER (ORDER BY 
		CASE WHEN @SortColumn = 'DiscountCode' AND @SortDirection = 'ASC' THEN DiscountCode END ASC,
		CASE WHEN @SortColumn = 'DiscountCode' AND @SortDirection = 'DESC' THEN DiscountCode END DESC,
		CASE WHEN @SortColumn = 'Description' AND @SortDirection = 'ASC' THEN Description END ASC,
		CASE WHEN @SortColumn = 'Description' AND @SortDirection = 'DESC' THEN Description END DESC,
		CASE WHEN @SortColumn = 'StartDate' AND @SortDirection = 'ASC' THEN StartDate END ASC,
		CASE WHEN @SortColumn = 'StartDate' AND @SortDirection = 'DESC' THEN StartDate END DESC,
		CASE WHEN @SortColumn = 'EndDate' AND @SortDirection = 'ASC' THEN EndDate END ASC,
		CASE WHEN @SortColumn = 'EndDate' AND @SortDirection = 'DESC' THEN EndDate END DESC,
		CASE WHEN @SortColumn = 'DiscountAmount' AND @SortDirection = 'ASC' THEN DiscountAmount END ASC,
		CASE WHEN @SortColumn = 'DiscountAmount' AND @SortDirection = 'DESC' THEN DiscountAmount END DESC,
		CASE WHEN @SortColumn = 'DiscountPercent' AND @SortDirection = 'ASC' THEN DiscountPercent END ASC,
		CASE WHEN @SortColumn = 'DiscountPercent' AND @SortDirection = 'DESC' THEN DiscountPercent END DESC,
		CASE WHEN @SortColumn = 'TotalUsageCount' AND @SortDirection = 'ASC' THEN TotalUsageCount END ASC,
		CASE WHEN @SortColumn = 'TotalUsageCount' AND @SortDirection = 'DESC' THEN TotalUsageCount END DESC,
		CASE WHEN @SortColumn = 'DateCreated' AND @SortDirection = 'ASC' THEN DiscountId END ASC,
		CASE WHEN @SortColumn = 'DateCreated' AND @SortDirection = 'DESC' THEN DiscountId END DESC
		) as 'RowNumber'
		FROM {databaseOwner}{objectQualifier}Commerce_Discounts
		WHERE 
			(
				(DiscountCode LIKE @Query AND @Query <> '')
				OR
				(Description LIKE @Query AND @Query <> '')
				OR 
				(@Query = '')
				OR
				(
					@Query <> '' 
					AND
					DiscountId IN (SELECT dp.DiscountId FROM {databaseOwner}{objectQualifier}Commerce_DiscountsToProducts as dp INNER JOIN {databaseOwner}{objectQualifier}Commerce_Products as P on P.ProductId = dp.ProductId WHERE dp.PortalId = @PortalId AND ProductName LIKE @Query)
				)
			) 
			AND 
			(PortalId = @PortalId)
			AND
			(
				(@ActiveOnly = 1
				AND
				(
					Active = 1
					AND
					EndDate > GETDATE()
				))
				OR
				(@ActiveOnly = 0)
			)
				
)
SELECT d.DiscountId, PortalId, ModuleId, DiscountCode, DiscountCodeRequired, StartDate, EndDate, Description, DiscountAmount, DiscountPercent,
 UserMaxUsage, TotalMaxUsage, TotalUsageCount, Active, Restriction
	FROM {databaseOwner}{objectQualifier}Commerce_Discounts as d INNER JOIN 
	Discounts as tmp ON tmp.discountId = d.DiscountId
	WHERE tmp.RowNumber BETWEEN @RowIndex AND ((@RowIndex + @MaxRows)-1);
	


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discounts_GetUserUsageCount]
@UserId int,
@DiscountId int
AS
SELECT     ISNULL(SUM({databaseOwner}{objectQualifier}Commerce_OrderDetails.Qty),0) + ISNULL(Count(Distinct cast({databaseOwner}{objectQualifier}Commerce_Orders.OrderId as char(36))),0)
FROM         {databaseOwner}{objectQualifier}Commerce_OrderDetails INNER JOIN
					  {databaseOwner}{objectQualifier}Commerce_Orders ON {databaseOwner}{objectQualifier}Commerce_OrderDetails.OrderId = {databaseOwner}{objectQualifier}Commerce_Orders.OrderId
WHERE     ({databaseOwner}{objectQualifier}Commerce_Orders.UserId = @UserId) AND (({databaseOwner}{objectQualifier}Commerce_OrderDetails.DiscountId = @DiscountId) OR ({databaseOwner}{objectQualifier}Commerce_Orders.DiscountId = @DiscountId))


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_UpdateUsage]
@DiscountId int
AS
UPDATE {databaseOwner}{objectQualifier}Commerce_Discounts
	SET TotalUsageCount = TotalUsageCount + 1
WHERE DiscountId = @DiscountId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_Save]
@DiscountId int,
@PortalId int,
@ModuleId int,
@StartDate datetime,
@EndDate datetime,
@Description nvarchar(1000),
@DiscountAmount money,
@DiscountPercent decimal,
@UserMaxUsage int,
@TotalMaxUsage int,
@TotalUsageCount int,
@Active bit,
@Restriction int,
@DiscountCode nvarchar(20),
@DiscountCodeRequired bit
AS
IF EXISTS(SELECT DiscountId FROM {databaseOwner}{objectQualifier}Commerce_Discounts WHERE DiscountId = @DiscountId)
	BEGIN
	UPDATE    {databaseOwner}{objectQualifier}Commerce_Discounts
	SET              PortalId = @PortalId, ModuleId = @ModuleId, StartDate = @StartDate, EndDate = @EndDate, Description = @Description, DiscountAmount = @DiscountAmount, 
					  DiscountPercent = @DiscountPercent, UserMaxUsage = @UserMaxUsage, TotalMaxUsage = @TotalMaxUsage, TotalUsageCount = @TotalUsageCount, 
					  Active = @Active, Restriction = @Restriction, DiscountCode = @DiscountCode, DiscountCodeRequired = @DiscountCodeRequired
	WHERE DiscountId = @DiscountId
	SELECT @DiscountId
	END
ELSE
	BEGIN
	INSERT INTO {databaseOwner}{objectQualifier}Commerce_Discounts
					  (PortalId, ModuleId, StartDate, EndDate, Description, DiscountAmount, DiscountPercent, UserMaxUsage, TotalMaxUsage, TotalUsageCount, Active, Restriction, DiscountCode, DiscountCodeRequired)
	VALUES     (@PortalId,@ModuleId,@StartDate,@EndDate,@Description,@DiscountAmount,@DiscountPercent,@UserMaxUsage,@TotalMaxUsage,@TotalUsageCount,@Active,@Restriction, @DiscountCode, @DiscountCodeRequired)
	SELECT SCOPE_IDENTITY()
	END


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_ListReqRoles]
@DiscountId int
AS
SELECT     D.DiscountId, D.RoleId, R.RoleName
FROM         {databaseOwner}{objectQualifier}Commerce_DiscountsToRoles AS D INNER JOIN
					  {databaseOwner}{objectQualifier}Roles AS R ON D.RoleId = R.RoleID
WHERE D.DiscountId = @DiscountId
ORDER BY R.RoleName


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_ListReqProducts]
@DiscountId int
AS
SELECT    D.RestrictId, D.DiscountId, D.ProductId, P.ProductName, P.ProductSKU, D.QualifyStartDate, D.QualifyEndDate
FROM         {databaseOwner}{objectQualifier}Commerce_Discounts_ReqProducts AS D INNER JOIN
					  {databaseOwner}{objectQualifier}Commerce_Products AS P ON D.ProductId = P.ProductId
WHERE D.DiscountId = @DiscountId
ORDER BY P.ProductSKU, P.ProductName


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_ListProducts]
@DiscountId int
AS
SELECT     P.ProductName, P.ProductSKU, D.ProductId, D.DiscountId
FROM         {databaseOwner}{objectQualifier}Commerce_Products AS P INNER JOIN
					  {databaseOwner}{objectQualifier}Commerce_DiscountsToProducts AS D ON P.ProductId = D.ProductId
WHERE     (D.DiscountId = @DiscountId)
ORDER BY P.ProductSKU, P.ProductName


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_List]                                                                                                                                                                                                           
	@PortalId int,                                                                                                                                                                                                                                              
	@ModuleId int,                                                                                                                                                                                                                                              
	@PageIndex int,                                                                                                                                                                                                                                             
	@PageSize int,                                                                                                                                                                                                                                              
	@Sort varchar(4) = "ASC",                                                                                                                                                                                                                                   
	@SortColumn varchar(50) = "Description",                                                                                                                                                                                                                    
	@Search nvarchar(255) = "*"                                                                                                                                                                                                                                 
AS                                                                                                                                                                                                                                                              
																																																																
DECLARE @PageLowerBound int                                                                                                                                                                                                                                     
DECLARE @PageUpperBound int                                                                                                                                                                                                                                     
DECLARE @RowsToReturn int                                                                                                                                                                                                                                       
DECLARE @sql nvarchar(2000)                                                                                                                                                                                                                                     
SET @sql = ''                                                                                                                                                                                                                                                   
SET @PageLowerBound = @PageSize * @PageIndex                                                                                                                                                                                                                    
SET @PageUpperBound = @PageLowerBound + @PageSize + 1                                                                                                                                                                                                           
SET @RowsToReturn = @PageSize * (@PageIndex + 1)                                                                                                                                                                                                                
SET ROWCOUNT @RowsToReturn                                                                                                                                                                                                                                      
Create TABLE #PageIndex                                                                                                                                                                                                                                         
(                                                                                                                                                                                                                                                               
	IndexId int IDENTITY (1, 1) NOT NULL,                                                                                                                                                                                                                       
	DiscountId Integer                                                                                                                                                                                                                                          
)                                                                                                                                                                                                                                                               
DECLARE @sqlP nvarchar(2000)                                                                                                                                                                                                                                    
			SET @sql = ' PortalId = ''' + Convert(varchar(50),@PortalId) + ''''                                                                                                                                                                                 
		-- AND ModuleId = ''' + Convert(varchar(50),@ModuleId) + ''''                                                                                                                                                                                           
		-- Search Criteria                                                                                                                                                                                                                                      
			BEGIN                                                                                                                                                                                                                                               
			if @Search <> '*'                                                                                                                                                                                                                                   
				BEGIN                                                                                                                                                                                                                                           
					if Len(@sql) > 0                                                                                                                                                                                                                            
							SET @sql = @sql + ' AND '                                                                                                                                                                                                           
				select @sql = @sql + ' (Description LIKE ''' + @Search + ''' OR DiscountCode LIKE ''%' + @Search + '%'')'                                                                                                                                       
				END                                                                                                                                                                                                                                             
			END                                                                                                                                                                                                                                                 
																																																																
	BEGIN                                                                                                                                                                                                                                                       
			-- Record Count                                                                                                                                                                                                                                     
			select @sqlP = 'SELECT Count(DiscountId) from {databaseOwner}{objectQualifier}Commerce_Discounts '                                                                                                                                                                        
																																																																
			if @sql <> ''                                                                                                                                                                                                                                       
				set @sql = ' WHERE ' + @sql                                                                                                                                                                                                                     
																																																																
			select @sqlP = @sqlP + @sql                                                                                                                                                                                                                         
																																																																
			exec sp_executesql  @sqlP                                                                                                                                                                                                                           
		END                                                                                                                                                                                                                                                     
		select @sqlP = 'INSERT INTO #PageIndex (DiscountId)                                                                                                                                                                                                     
						SELECT DiscountId FROM {databaseOwner}{objectQualifier}Commerce_Discounts '                                                                                                                                                                                   
																																																																
					select @sql = @sql + ' ORDER BY ' + @SortColumn + ' ' + @Sort                                                                                                                                                                               
																																																																
				select @sqlP = @sqlP + @sql                                                                                                                                                                                                                     
	   --print @sqlP                                                                                                                                                                                                                                            
		exec sp_executesql @sqlP                                                                                                                                                                                                                                
SELECT     D.DiscountId, D.PortalId, D.ModuleId, D.StartDate, D.EndDate, D.Description,                                                                                                                                                                         
	Discount = (CASE WHEN D.DiscountAmount = 0 THEN CONVERT(varchar(20),D.DiscountPercent) + '%' ELSE Convert(varchar(20),D.DiscountAmount) END), D.DiscountAmount, D.DiscountPercent, D.UserMaxUsage, D.TotalMaxUsage, D.TotalUsageCount, D.Restriction,       
					  D.Active                                                                                                                                                                                                                                  
FROM         {databaseOwner}{objectQualifier}Commerce_Discounts as D, #PageIndex PageIndex                                                                                                                                                                                            
WHERE D.DiscountId = PageIndex.DiscountId AND PageIndex.IndexId > @PageLowerBound AND PageIndex.IndexId < @PageUpperBound                                                                                                                                       
Order By PageIndex.IndexId                                                                                                                                                                                                                                      
																																																																
SELECT * FROM {databaseOwner}{objectQualifier}Commerce_Discounts WHERE PortalId = @PortalId AND ModuleId = @ModuleId                                                                                                                                                                  


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_GetByCode]
	@DiscountCode nvarchar(50),
	@PortalId int,
	@ModuleId int
AS
SELECT * FROM {databaseOwner}{objectQualifier}Commerce_Discounts WHERE DiscountCode = @DiscountCode AND PortalId = @PortalId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_Get]
	@DiscountId int,
	@PortalId int,
	@ModuleId int
AS
SELECT * FROM {databaseOwner}{objectQualifier}Commerce_Discounts WHERE DiscountId = @DiscountId AND PortalId = @PortalId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_FindDiscount]
@ProductId uniqueidentifier,
@UserId int,
@DiscountCode nvarchar(50)
AS
SELECT D.DiscountId, D.PortalId, D.ModuleId, D.StartDate, D.EndDate, D.Description, D.DiscountAmount, D.DiscountPercent, D.UserMaxUsage, D.TotalMaxUsage, 
					  D.TotalUsageCount, D.Active, D.Restriction, D.DiscountCode, D.DiscountCodeRequired, RP.QualifyStartDate, RP.QualifyEndDate
FROM         {databaseOwner}{objectQualifier}Commerce_Discounts AS D LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}Commerce_DiscountsToProducts AS P ON D.DiscountId = P.DiscountId LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}Commerce_Discounts_ReqProducts AS RP ON D.DiscountId = RP.DiscountId
WHERE     
	(
		(D.Active = 1) AND 
		(D.DiscountCodeRequired = 0) AND 
		(D.Restriction = 1) AND 
		(P.ProductId = @ProductId) AND 
		(D.StartDate <= GetDate()) AND
		(D.EndDate >= GetDate())
	)
		OR
	(
		(D.Active = 1) AND 
		(D.DiscountCodeRequired = 0) AND 
		(D.Restriction = 2) AND 
		(D.StartDate <= GetDate()) AND
		(D.EndDate >= GetDate()) AND 
		@UserId IN
			(
				SELECT     O.UserId
				FROM         {databaseOwner}{objectQualifier}Commerce_Orders AS O INNER JOIN
							{databaseOwner}{objectQualifier}Commerce_OrderDetails AS OD ON O.OrderId = OD.OrderId INNER JOIN
							{databaseOwner}{objectQualifier}Commerce_Discounts_ReqProducts as req on req.productid = od.productid INNER JOIN
							{databaseOwner}{objectQualifier}Commerce_Discounts AS D on d.discountid = req.discountid INNER JOIN
							{databaseOwner}{objectQualifier}Commerce_DiscountsToProducts AS P ON D.DiscountId = P.DiscountId
				WHERE (PurchaseDate >= req.QualifyStartDate AND PurchaseDate <= req.QualifyEndDate AND p.ProductId = @ProductId)
			)
	)
		OR
	(
		(D.Active = 1) AND 
		(D.DiscountCodeRequired = 0) AND 
		(D.Restriction = 3) AND 
		(P.ProductId = @ProductId) AND 
		(D.StartDate <= GetDate()) AND 
		(D.EndDate >= GetDate())
	)
		OR
	(
		(D.Active = 1) AND 
		(D.DiscountCodeRequired = 1) AND 
		(D.DiscountCode = @DiscountCode) AND 
		(D.Restriction = 1) AND 
		(P.ProductId = @ProductId) AND 
		(D.StartDate <= GetDate()) AND 
		(D.EndDate >= GetDate())
	)
		OR
	(
		(D.Active = 1) AND 
		(D.DiscountCodeRequired = 1) AND 
		(D.DiscountCode = @DiscountCode) AND 
		(D.Restriction = 2) AND 
		(RP.ProductId = @ProductId) AND 
		(D.StartDate <= GetDate()) AND 
		(D.EndDate >= GetDate()) AND
		 @UserId IN 
			(
				SELECT     O.UserId
				FROM         {databaseOwner}{objectQualifier}Commerce_Orders AS O INNER JOIN
							{databaseOwner}{objectQualifier}Commerce_OrderDetails AS OD ON O.OrderId = OD.OrderId
				WHERE (PurchaseDate >= RP.QualifyStartDate AND PurchaseDate <= RP.QualifyEndDate AND OD.ProductId = @ProductId)
			)
	)
		OR
	(
		(D.Active = 1) AND 
		(D.DiscountCodeRequired = 1) AND 
		(D.DiscountCode = @DiscountCode) AND 
		(D.Restriction = 3) AND 
		(P.ProductId = @ProductId) AND 
		(D.StartDate <= GetDate()) AND 
		(D.EndDate >= GetDate())
	)

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_DelReqRole]
@DiscountId int,
@RoleId int
AS
DELETE FROM {databaseOwner}{objectQualifier}Commerce_DiscountsToRoles
WHERE DiscountId = @DiscountId AND RoleId = @RoleId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_DelReqProduct]
@DiscountId int,
@RestrictId int
AS
DELETE FROM {databaseOwner}{objectQualifier}Commerce_Discounts_ReqProducts
WHERE DiscountId = @DiscountId AND RestrictId = @RestrictId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_DeleteProduct]
	@DiscountId int,
	@ProductId uniqueidentifier	
AS
DELETE FROM {databaseOwner}{objectQualifier}Commerce_DiscountsToProducts
WHERE DiscountId = @DiscountId AND ProductId = @ProductId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_AddReqProduct]
	@DiscountId int,
	@ProductId uniqueidentifier,
	@QualifyStartDate datetime,
	@QualifyEndDate datetime
AS
IF NOT EXISTS(SELECT DiscountId FROM {databaseOwner}{objectQualifier}Commerce_Discounts_ReqProducts WHERE DiscountId = @DiscountId AND ProductId = @ProductId)
	INSERT INTO  {databaseOwner}{objectQualifier}Commerce_Discounts_ReqProducts
	(DiscountID, ProductId, QualifyStartDate, QualifyEndDate)
	VALUES
	(@DiscountId, @ProductId, @QualifyStartDate, @QualifyEndDate)


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_AddReqRole]
	@DiscountId int,
	@RoleId int 
AS
IF NOT EXISTS(SELECT DiscountId FROM {databaseOwner}{objectQualifier}Commerce_DiscountsToRoles WHERE DiscountId = @DiscountId AND RoleId = @RoleId)
	INSERT INTO  {databaseOwner}{objectQualifier}Commerce_DiscountsToRoles
	(DiscountID, RoleId)
	VALUES
	(@DiscountId, @RoleId)


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_Delete]
	@DiscountId int,
	@PortalId int,
	@ModuleId int
AS
DELETE FROM {databaseOwner}{objectQualifier}Commerce_Discounts_ReqProducts WHERE DiscountId = @DiscountId
DELETE FROM {databaseOwner}{objectQualifier}Commerce_DiscountsToCustomers WHERE DiscountId = @DiscountId
DELETE FROM {databaseOwner}{objectQualifier}Commerce_DiscountsToProducts WHERE DiscountId = @DiscountId AND PortalId = @PortalId
DELETE FROM {databaseOwner}{objectQualifier}Commerce_Discounts WHERE DiscountId = @DiscountId AND PortalId = @PortalId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_DashBoard_SalesByMonth]
@PortalId int
AS
SELECT     SUM(GrandTotal) AS GrandTotal, DATEPART(mm, PurchaseDate) AS [Month]
FROM         {databaseOwner}{objectQualifier}Commerce_Orders
WHERE     (PortalId = @PortalId) AND (IsPaid = 1) AND (YEAR(PurchaseDate) = YEAR(GETDATE()))
GROUP BY DATEPART(mm, PurchaseDate)
ORDER BY [Month]


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_AddProduct]
	@DiscountId int,
	@ProductId uniqueidentifier,
	@PortalId int,
	@ModuleId int
	
AS
INSERT INTO {databaseOwner}{objectQualifier}Commerce_DiscountsToProducts
	(PortalId, ModuleId, ProductId, DiscountId)
	VALUES
	(@PortalId, @ModuleId, @ProductId, @DiscountId)


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Dashboard_RecentPurchases]
@PortalId int
AS
SELECT     TOP 5 O.InvoiceNumber, O.OrderId, O.GrandTotal, O.PurchaseDate, OD.SubTotal, OD.Qty, P.ProductName
FROM         {databaseOwner}{objectQualifier}Commerce_Orders AS O INNER JOIN
					  {databaseOwner}{objectQualifier}Commerce_OrderDetails AS OD ON O.OrderId = OD.OrderId INNER JOIN
					  {databaseOwner}{objectQualifier}Commerce_Products AS P ON OD.ProductId = P.ProductId
WHERE     (O.PortalId = @PortalId)
ORDER BY O.PurchaseDate DESC


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Dashboard_QuickSummary]
@PortalId int
AS

DECLARE @DayTotal as money
DECLARE @MonthTotal as money
DECLARE @QuarterTotal as money
DECLARE @YearTotal as money
SELECT    @DayTotal = IsNull(Sum(GrandTotal),0)
FROM         {databaseOwner}{objectQualifier}Commerce_Orders
WHERE    (PortalId = @PortalId) AND (IsPaid = 1)  AND CONVERT(varchar(20), PurchaseDate, 101) = CONVERT(varchar(20), GetDate(), 101)

SELECT    @MonthTotal = IsNull(Sum(GrandTotal),0)
FROM         {databaseOwner}{objectQualifier}Commerce_Orders
WHERE    (PortalId = @PortalId) AND  (IsPaid = 1)  AND MONTH(PurchaseDate) = MONTH(GetDate()) AND YEAR(PurchaseDate) = YEAR(GetDate())


SELECT    @QuarterTotal = IsNull(Sum(GrandTotal),0)
FROM         {databaseOwner}{objectQualifier}Commerce_Orders
WHERE     (PortalId = @PortalId) AND (IsPaid = 1)  AND datepart(qq,PurchaseDate) = datepart(qq,GetDate()) AND YEAR(PurchaseDate) = YEAR(GetDate())

SELECT    @YearTotal = IsNull(Sum(GrandTotal),0)
FROM         {databaseOwner}{objectQualifier}Commerce_Orders
WHERE     (PortalId = @PortalId) AND (IsPaid = 1)  AND YEAR(PurchaseDate) = YEAR(GetDate())

SELECT @DayTotal as DayTotal, @MonthTotal as MonthTotal, @QuarterTotal as QuarterTotal, @YearTotal as YearTotal


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_DashBoard_MonthBestProducts]
@PortalId int
AS
SELECT Top 5 P.ProductName, SUM(OD.Qty) as UnitsSold, Sum(OD.SubTotal) as TotalAmount
FROM         {databaseOwner}{objectQualifier}Commerce_Orders AS O INNER JOIN
					  {databaseOwner}{objectQualifier}Commerce_OrderDetails AS OD ON O.OrderId = OD.OrderId INNER JOIN
					  {databaseOwner}{objectQualifier}Commerce_Products AS P ON OD.ProductId = P.ProductId
WHERE     (O.PortalId = @PortalId) AND (O.IsPaid = 1) AND (Month(O.PurchaseDate) = Month(GetDate()) AND YEAR(O.PurchaseDate) = Year(GetDate()))
Group By P.ProductName
ORDER By TotalAmount DESC, UnitsSold DESC


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Customers_List]                                                                                                                                                                                                          
	@PortalId int,                                                                                                                                                                                                                                              
	@ModuleId int,                                                                                                                                                                                                                                              
	@PageIndex int,                                                                                                                                                                                                                                             
	@PageSize int,                                                                                                                                                                                                                                              
	@Sort varchar(4) = "ASC",                                                                                                                                                                                                                                   
	@SortColumn varchar(50) = "LastName",                                                                                                                                                                                                                       
	@Search nvarchar(255) = "*"                                                                                                                                                                                                                                 
AS                                                                                                                                                                                                                                                              
																																																																
DECLARE @PageLowerBound int                                                                                                                                                                                                                                     
DECLARE @PageUpperBound int                                                                                                                                                                                                                                     
DECLARE @RowsToReturn int                                                                                                                                                                                                                                       
DECLARE @sql nvarchar(2000)                                                                                                                                                                                                                                     
SET @sql = ''                                                                                                                                                                                                                                                   
SET @PageLowerBound = @PageSize * @PageIndex                                                                                                                                                                                                                    
SET @PageUpperBound = @PageLowerBound + @PageSize + 1                                                                                                                                                                                                           
SET @RowsToReturn = @PageSize * (@PageIndex + 1)                                                                                                                                                                                                                
SET ROWCOUNT @RowsToReturn                                                                                                                                                                                                                                      
Create TABLE #PageIndex                                                                                                                                                                                                                                         
(                                                                                                                                                                                                                                                               
	IndexId int IDENTITY (1, 1) NOT NULL,                                                                                                                                                                                                                       
	ContactId Integer                                                                                                                                                                                                                                           
)                                                                                                                                                                                                                                                               
DECLARE @sqlP nvarchar(2000)                                                                                                                                                                                                                                    
			SET @sql = ' PortalId = ''' + Convert(varchar(50),@PortalId) + ''''                                                                                                                                                                                 
			-- Search Criteria                                                                                                                                                                                                                                  
			BEGIN                                                                                                                                                                                                                                               
			if @Search <> '*'                                                                                                                                                                                                                                   
				BEGIN                                                                                                                                                                                                                                           
					if Len(@sql) > 0                                                                                                                                                                                                                            
							SET @sql = @sql + ' AND '                                                                                                                                                                                                           
				select @sql = @sql + ' (PrimaryEmail LIKE ''%' + @Search + '%'' OR FirstName LIKE ''%' + @Search + '%'' OR LastName LIKE ''%' + @Search + '%'' OR Username LIKE ''%' + @Search + '%'')'                                                         
				END                                                                                                                                                                                                                                             
			END                                                                                                                                                                                                                                                 
																																																																
	BEGIN                                                                                                                                                                                                                                                       
			-- Record Count                                                                                                                                                                                                                                     
			select @sqlP = 'SELECT Count(ContactId) from dbo.vw_Commerce_CustomerList '                                                                                                                                                                   
																																																																
			if @sql <> ''                                                                                                                                                                                                                                       
				set @sql = ' WHERE ' + @sql                                                                                                                                                                                                                     
																																																																
			select @sqlP = @sqlP + @sql                                                                                                                                                                                                                         
																																																																
			exec sp_executesql  @sqlP                                                                                                                                                                                                                           
		END                                                                                                                                                                                                                                                     
		select @sqlP = 'INSERT INTO #PageIndex (ContactId)                                                                                                                                                                                                      
						SELECT ContactId FROM dbo.vw_Commerce_CustomerList '                                                                                                                                                                              
																																																																
					select @sql = @sql + ' ORDER BY ' + @SortColumn + ' ' + @Sort                                                                                                                                                                               
																																																																
				select @sqlP = @sqlP + @sql                                                                                                                                                                                                                     
	   --print @sqlP                                                                                                                                                                                                                                            
		exec sp_executesql @sqlP                                                                                                                                                                                                                                
Select C.* From dbo.vw_Commerce_CustomerList as C, #PageIndex PageIndex                                                                                                                                                                                   
WHERE C.ContactId = PageIndex.ContactId AND PageIndex.IndexId > @PageLowerBound AND PageIndex.IndexId < @PageUpperBound                                                                                                                                         
Order By PageIndex.IndexId   


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Customers_GetAddresses]
@UserId int
AS
SELECT ShipTo, BillTo from {databaseOwner}{objectQualifier}Commerce_Orders
WHERE UserId = @UserId



GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Cart_UpdateOrderData]
@OrderItemId uniqueidentifier,
@Properties nvarchar(max)
AS
UPDATE {databaseOwner}{objectQualifier}Commerce_OrderTemp
	SET OrderItemData = @Properties
WHERE OrderItemId = @OrderItemId






GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Customers_FindByEmail](@PortalID int, @Email nvarchar(150))
 AS
SELECT top 1 U.UserName, U.UserId
FROM         {databaseOwner}{objectQualifier}Users U INNER JOIN
					  {databaseOwner}{objectQualifier}UserPortals UP ON U.UserID = UP.UserId
WHERE     (UP.PortalId = @PortalId) AND (U.Email = @Email)


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Cart_UpdateDiscount]
@CartId int,
@PortalId int,
@Discount money,
@DiscountId int
AS
UPDATE {databaseOwner}{objectQualifier}Commerce_Cart
			SET DateUpdated = GETUTCDATE(),
			Discount=@Discount,
			DiscountId = @DiscountId
				WHERE CartId = @CartId AND PortalId = @PortalId




GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Cart_UpdateDate]
@CartId int,
@PortalId int
AS
UPDATE {databaseOwner}{objectQualifier}Commerce_Cart
			SET DateUpdated = GETUTCDATE()
				WHERE CartId = @CartId AND PortalId = @PortalId



GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Cart_Save]
@CartId int,
@ShopperId uniqueidentifier,
@PortalId int,
@UserId int,
@BillingAddress nvarchar(1000),
@ShippingAddress nvarchar(1000),
@OrderId uniqueidentifier,
@Discount money,
@DiscountId int
AS
IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}Commerce_Cart WHERE CartId = @CartId AND ShopperId = @ShopperId AND PortalId = @PortalId)
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}Commerce_Cart (ShopperId, PortalId, UserId, DateCreated, DateUpdated, DiscountId)
			VALUES
		(@ShopperId, @PortalId, @UserId, GETUTCDATE(), GETUTCDATE(), @DiscountId)
		SET @CartId = SCOPE_IDENTITY()
	END
ELSE
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Commerce_Cart
			SET UserId = @UserId,
				BillingAddress = @BillingAddress,
				ShippingAddress = @ShippingAddress,
				OrderId = @OrderId,
				DateUpdated = GETUTCDATE(),
				Discount = @Discount,
				DiscountId = @DiscountId
				WHERE CartId = @CartId AND PortalId = @PortalId
	END
SELECT @CartId




GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Cart_Get]
@CartId int,
@PortalId int
AS
SELECT * from {databaseOwner}{objectQualifier}Commerce_Cart WHERE CartId = @CartId AND PortalId = @PortalId

GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Discount_ForProduct]
@PortalId int,
@ProductId uniqueidentifier
AS
SELECT d.* FROM {databaseOwner}{objectQualifier}Commerce_Discounts as d INNER JOIN
		{databaseOwner}{objectQualifier}Commerce_DiscountsToProducts as dp ON dp.DiscountId = d.DiscountId
	WHERE 
		d.PortalId = @PortalId
		AND
		dp.ProductId = @ProductId
		AND
		d.Active = 1
		AND
		d.StartDate < GETUTCDATE()
		AND
		d.EndDate > GETUTCDATE()
		AND
		d.TotalMaxUsage > d.TotalUsageCount
	
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_OrderDetails_ListByProductIdForUser]
@PortalId int,
@ProductId uniqueidentifier,
@UserId int
AS
SELECT od.*, o.DatePaid FROM {databaseOwner}{objectQualifier}Commerce_OrderDetails as od INNER JOIN
		{databaseOwner}{objectQualifier}Commerce_Orders as o ON O.OrderId = od.OrderDetailsId
	WHERE o.PortalId = @PortalId AND o.UserId = @UserId AND od.ProductId = @ProductId AND o.IsPaid = 1 AND o.IsDeleted = 0
	
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Commerce_Cart_UpdateCartItemDiscount]
@OrderItemId uniqueidentifier,
@SubTotal money,
@Discount money,
@DiscountId int
AS
UPDATE {databaseOwner}{objectQualifier}Commerce_OrderTemp
	SET Discount = @Discount,
		DiscountId = @DiscountId,
		SubTotal = @SubTotal
WHERE OrderItemId = @OrderItemId
GO
-- begin clustered index needed by Azure
CREATE CLUSTERED INDEX [IX_Commerce_Settings] ON {databaseOwner}[{objectQualifier}Commerce_Settings] ([PortalID])
GO

CREATE CLUSTERED INDEX [IX_Commerce_Product_Properties] ON {databaseOwner}[{objectQualifier}Commerce_Product_Properties] ([ProductId])
GO

CREATE CLUSTERED INDEX [IX_Commerce_Product_Files] ON {databaseOwner}[{objectQualifier}Commerce_Product_Files] ([FileProductKey])
GO

CREATE CLUSTERED INDEX [IX_Commerce_DiscountsToRoles] ON {databaseOwner}[{objectQualifier}Commerce_DiscountsToRoles] ([DiscountId])
GO

CREATE CLUSTERED INDEX [IX_Commerce_DiscountsToProducts] ON {databaseOwner}[{objectQualifier}Commerce_DiscountsToProducts] ([DiscountId])
GO

CREATE CLUSTERED INDEX [IX_Commerce_DiscountsToCustomers] ON {databaseOwner}[{objectQualifier}Commerce_DiscountsToCustomers] ([DiscountId])
GO

CREATE CLUSTERED INDEX [IX_Commerce_Discounts_ReqProducts] ON {databaseOwner}[{objectQualifier}Commerce_Discounts_ReqProducts] ([DiscountId])
GO

-- end clustered index needed by Azure



