<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdvancedParams.Text" xml:space="preserve">
    <value>Advanced Parameters</value>
  </data>
  <data name="AnyPage.Text" xml:space="preserve">
    <value>Any Page</value>
  </data>
  <data name="AnyRole.Text" xml:space="preserve">
    <value>Any Role</value>
  </data>
  <data name="cmdSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="InvalidRoleId.Text" xml:space="preserve">
    <value>[Error: Invalid RoleId]</value>
  </data>
  <data name="InvalidTabId.Text" xml:space="preserve">
    <value>[Error: Invalid TabId]</value>
  </data>
  <data name="lblAddRule.Text" xml:space="preserve">
    <value>Add/Edit Segmentation Rule</value>
  </data>
  <data name="lblDomainName.Help" xml:space="preserve">
    <value>Setting the domain name allows you to aggregate visits to multiple subdomains in a single profile as if they were a single site. Example: entering “.sample-domain.com” (notice the leading “.”) allows you to track dogs.sample-domain.com and cats.sample-domain.com as a single entity.</value>
  </data>
  <data name="lblDomainName.Text" xml:space="preserve">
    <value>Domain Name</value>
  </data>
  <data name="lblEnable.Help" xml:space="preserve">
    <value>Enable this feature to generate statistics about the visitors of your site</value>
  </data>
  <data name="lblEnable.Text" xml:space="preserve">
    <value>Enable</value>
  </data>
  <data name="lblTrackingId.Help" xml:space="preserve">
    <value>Website tracking ID obtained from Google</value>
  </data>
  <data name="lblTrackingId.Text" xml:space="preserve">
    <value>Tracking ID</value>
  </data>
  <data name="lblUrlParameter.Help" xml:space="preserve">
    <value>[OPTIONAL] Javascript code fragment that will be passed as a parameter to the page tracker (used to customize the value tracked in Google Analytics instead of the default location.href value)</value>
  </data>
  <data name="lblUrlParameter.Text" xml:space="preserve">
    <value>URLParameter</value>
  </data>
  <data name="plLabel.Help" xml:space="preserve">
    <value>The name of the segmentation category</value>
  </data>
  <data name="plLabel.Text" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="plPages.Help" xml:space="preserve">
    <value>The pages that will be tracked as part of the segment</value>
  </data>
  <data name="plPages.Text" xml:space="preserve">
    <value>Page</value>
  </data>
  <data name="plRoles.Help" xml:space="preserve">
    <value>The roles that will be tracked as part of the segment</value>
  </data>
  <data name="plRoles.Text" xml:space="preserve">
    <value>Role</value>
  </data>
  <data name="SegRules.Text" xml:space="preserve">
    <value>Segmentation Rules</value>
  </data>
  <data name="Tracking.Text" xml:space="preserve">
    <value>Tracking</value>
  </data>
  <data name="valLabel.Text" xml:space="preserve">
    <value>A label is required</value>
  </data>
  <data name="valTrackingId.Text" xml:space="preserve">
    <value>Tracking ID is required</value>
  </data>
  <data name="Label.Header" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="Page.Header" xml:space="preserve">
    <value>Page</value>
  </data>
  <data name="Role.Header" xml:space="preserve">
    <value>Role</value>
  </data>
  <data name="imgDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="imgDn.Text" xml:space="preserve">
    <value>Move Down</value>
  </data>
  <data name="imgEdit.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="imgUp.Text" xml:space="preserve">
    <value>Move Up</value>
  </data>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="lblNoRecords.Text" xml:space="preserve">
    <value>There are no segmentation rules setup for this site. </value>
  </data>
  <data name="Down.Header" xml:space="preserve">
    <value>Down</value>
  </data>
  <data name="Up.Header" xml:space="preserve">
    <value>Up</value>
  </data>
</root>